import { css, html, TemplateResult } from 'lit';
import { customElement, property, state } from 'lit/decorators.js';
import { ancestries } from './data/ancestries';

import { DynamicLitElement } from './styles/dynamic';

import './elements/pf-choices';
import './elements/pf-selection';
import './elements/pf-tabs';
import './elements/pf-color-wheel';
import './elements/pf-tag';
import './elements/pf-tip';
import './elements/pf-sheet';

import { Tab } from './elements/pf-tabs';
import { heritages, HeritagesTableRow } from './data/heritages';
import { backgrounds } from './data/backgrounds';
import { classes } from './data/classes';
import { chooseAncestry, chooseBackground, chooseClass, chooseHeritage, currentAncestry, 
         currentBackground, currentClass, currentHeritage, makeExampleChoices, currentlyMadeChoice } from './state';
import { uniheritages, UniheritagesTableRow } from './data/uniheritages';
import { homebackgrounds } from './data/homebackgrounds';
import { updateBackgroundImage } from './styles/dynamic';
import { calculateSheet } from './calc';
import { CalculatedSheet } from './calc/sheet';
import { basicStyles } from './styles/shared';

// import './playground/wsc-code-tester';
// import './playground/wsc-text-tester';

// Next in approximate order:
// - More statements
// - Finish up with the dynamic color handling for closest match

type NavigationTabs = 'ancestries' | 'heritages' | 'backgrounds' | 'classes' | 'choices' | 'sheet' | 'test';

type RenderableTab<T> = Tab<T> & {
  render: () => TemplateResult | unknown;
}

(document.querySelector('body') as HTMLBodyElement).setAttribute('loaded', '');

const initDevMode = false;

@customElement('pf-main')
export class PFMain extends DynamicLitElement {
  @property({attribute: false}) tab: NavigationTabs = 'ancestries';

  @state() backgroundArtist!: string;

  #sheet!: CalculatedSheet;

  constructor() {
    super();

    // This function does not reference DOM (not yet) generated by this custom element
    this.pickNewBackgroundImage();

    if (initDevMode) {
      makeExampleChoices();
      this.tab = 'sheet';
    }
  }

  render() {
    this.#sheet = calculateSheet();

    // Avoiding repetetive clicking while developing

    const tabs = this.navigationTabs();

    return html`
      <pf-color-wheel></pf-color-wheel>
      <main>
        <header class="hero">Persona Foundry</header>
        <nav>
          <pf-tabs type="nav" level="1" .tabs=${tabs} .tab=${this.tab} @selected=${(e: CustomEvent<NavigationTabs>) => this.tab = e.detail}></pf-tabs>
        </nav>
        <section>
          ${tabs.find(tab => tab?.name == this.tab)?.render()}
        </section>
      </main>
      <hr class="pre-footer">
      <footer>
        <div class="copyright">© 2023 Markus Mårtensson. All code available under the GPLv3.</div>
        <hr>
        <div class="acknowledgements">
          <p>This website uses trademarks and/or copyrights owned by Paizo Inc., which are used under Paizo's Community Use Policy (<a href="https://paizo.com/communityuse" target="_blank">paizo.com/communityuse</a>).
            We are expressly prohibited from charging you to use or access this content. This website is not published, endorsed, or specifically approved by Paizo Inc. For more information about Paizo Inc. and Paizo products,
            visit <a href="https://paizo.com/" target="_blank">paizo.com</a>.</p>
          <hr>
          <p>Underpinning this whole endeavour is a database dump of the <a href="https://wanderersguide.app/" target="_blank">Wanderer's Guide</a>,
            lovingly transformed from MySQL DDL into typesafe data run exclusively in the browser. There is no backend involved. Outside of the database
            dump, this is an entirely separate implementation.
          </p>
          <hr>
          <p>Credit also to <b>${this.backgroundArtist}</b> who is the artist behind the background image. From a collection
              of images curated by the guide and found in their database dump.</p>
        </div>
      </footer>
    `;
  }

  static styles = [ 
    basicStyles,
    css`
      :host {
        display: flex;
        flex-direction: column;
        align-items: center;
      }
      pf-color-wheel {
        position: absolute;
        top: 0;
        left: 0;
        display: none;
      }
      pf-tabs {
        margin-bottom: 2rem;
        margin-top: 1rem;
      }
      header.hero {
        --hero-title-text: var(--canvas-fg);
        --text-outline-shadow: 
             -1px -1px 0 hsla(var(--canvas-bg-gray-hsl),.3), 
              1px -1px 0 hsla(var(--canvas-bg-gray-hsl),.3),
             -1px  1px 0 hsla(var(--canvas-bg-gray-hsl),.3),
              1px  1px 0 hsla(var(--canvas-bg-gray-hsl),.3);

        font-family: 'Tourney', fixed;
        font-size: 2.5rem;
        color: var(--hero-title-text);
        text-shadow: var(--text-outline-shadow);
        text-align: center;
      }
      footer {
        margin-top: 1rem;
        color: var(--canvas-fg);
      }

      @media screen and (min-width: 1408px) {
        main {
          width: clamp(800px, 70%, 1400px);
          border-left: solid 1px black;
          padding: 1rem;
          padding-top: 0;
        }
        main::after {
          content: "";
          position: absolute;
          display: block;
          width: 20%;
          margin-top: 1rem;
          margin-left: -1rem;
          border-bottom: 1px solid;
          border-image-slice: 1;
          border-image-source: linear-gradient(to right, #000, rgba(0,0,0,0));
        }
        header.hero {
          position: absolute;
          font-size: 4rem;
          transform-origin: left bottom;
          transform: rotate(90deg) translateX(32rem) translateY(10px) scale(-1, -1);
        }
        hr {
          border: none;
          border-top: solid 1px #111;
        }  
    
        div[level] {
          background: var(--canvas-bg);
          color: var(--canvas-fg);
          padding: 1rem;
        }
        div[level="1"] {
          box-shadow: 2px 2px 2px 2px rgba(0,0,0,.5);
        }

        hr.pre-footer {
          border: none;
          width: 100%;
          padding: 0;
          margin: 0;
          height: 3rem;
          background: linear-gradient(to bottom, rgba(0,0,0,0) 5%, rgba(0,0,0,.8) 80%);
        }
        footer {
          background: rgba(0,0,0,.8);
          margin: 0;
          padding: 0 calc(100% / 2 - clamp(400px, 35%, 700px));
          color: #888;
        }
      }

      @media screen and (min-width: 1600px) {
        pf-color-wheel {
          display: block;
        }
      }
    `
  ];

  pickNewBackgroundImage() {
    const { name, artworkURL } = homebackgrounds[Math.floor(Math.random()*homebackgrounds.length)];

    console.log(`New background image by ${name}`, artworkURL);
    this.backgroundArtist = name;

    updateBackgroundImage(artworkURL);
  }

  navigationTabs(): RenderableTab<NavigationTabs>[] {
    const self = this;
    const sheet = this.#sheet;

    const tabs: RenderableTab<NavigationTabs>[] = [
      {
        name: 'ancestries',
        title: 'Ancestries',
        enabled: () => true,
        render() {
          return html`
            <pf-selection detailed .table=${ancestries} @chosen=${(ev: CustomEvent) => { 
              chooseAncestry(ev.detail);
              self.tab = 'heritages';
            }}></p-selection>
          `;
        }
      },
      {
        name: 'heritages',
        title: 'Heritages',
        enabled: () => !!currentAncestry(),
        render() {
          const mix = [
            ...heritages,
            ...uniheritages,
          ];
          
          const filter = (row: HeritagesTableRow|UniheritagesTableRow): boolean => {
            if ('indivAncestryName' in row && row.indivAncestryName !== currentAncestry()?.name) return false;

            return !('ancestryID' in row) || row.ancestryID === currentAncestry()?.id;
          }
          
          return html`
            <pf-selection .table=${mix} .filterFn=${filter} @chosen=${(ev: CustomEvent) => { 
              chooseHeritage(ev.detail);
              self.tab = 'backgrounds';
            }}></p-selection>
          `;
        }
      },
      {
        name: 'backgrounds',
        title: 'Backgrounds',
        enabled: () => !!currentHeritage(),
        render() {
          return html`
            <pf-selection .table=${backgrounds} @chosen=${(ev: CustomEvent) => { 
              chooseBackground(ev.detail);
              self.tab = 'classes';
            }}></p-selection>
          `;
        }
      },
      {
        name: 'classes',
        title: 'Classes',
        enabled: () => !!currentBackground(),
        render() {
          return html`
            <pf-selection detailed .table=${classes} @chosen=${(ev: CustomEvent) => { 
              chooseClass(ev.detail);
              self.tab = 'sheet';
            }}></p-selection>
          `;
        }
      },
      {
        name: 'choices',
        title: 'Choices',
        enabled: () => !!currentClass(),
        badgeCount() {
            return sheet.activeChoices.filter(c => !currentlyMadeChoice(c.ref)).length;
        },
        render() {
          return html`
            <pf-choices @change=${() => self.requestUpdate()}></p-choices>
          `;
        }
      },
      {
        name: 'sheet',
        title: 'Sheet',
        enabled: () => !!currentClass(),
        render() {
          return html`<pf-sheet></pf-sheet>`;
        }
      },/*
      {
        name: 'test',
        title: 'Test',
        enabled: () => true,
        render() {
          return html`
          <div level="0">
          Level 0 <input value="Hello">
            <div level="1">
            Level 1 <input value="Hello">
              <div level="2">
              Level 2 <input value="Hello">
                <div level="3">
                Level 3 <input value="Hello">
                  <div level="4">
                  Level 4 <input value="Hello">
                  </div>
                </div>
              </div>
            </div>
          </div> 
          `;
        }
      },*/
    ];
    return tabs;
  }  
}

declare global {
  interface HTMLElementTagNameMap {
    'pf-main': PFMain
  }
}
