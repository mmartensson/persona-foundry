// Generated by Peggy 3.0.0.
//
// https://peggyjs.org/

function peg$subclass(child, parent) {
  function C() { this.constructor = child; }
  C.prototype = parent.prototype;
  child.prototype = new C();
}

function peg$SyntaxError(message, expected, found, location) {
  var self = Error.call(this, message);
  // istanbul ignore next Check is a necessary evil to support older environments
  if (Object.setPrototypeOf) {
    Object.setPrototypeOf(self, peg$SyntaxError.prototype);
  }
  self.expected = expected;
  self.found = found;
  self.location = location;
  self.name = "SyntaxError";
  return self;
}

peg$subclass(peg$SyntaxError, Error);

function peg$padEnd(str, targetLength, padString) {
  padString = padString || " ";
  if (str.length > targetLength) { return str; }
  targetLength -= str.length;
  padString += padString.repeat(targetLength);
  return str + padString.slice(0, targetLength);
}

peg$SyntaxError.prototype.format = function(sources) {
  var str = "Error: " + this.message;
  if (this.location) {
    var src = null;
    var k;
    for (k = 0; k < sources.length; k++) {
      if (sources[k].source === this.location.source) {
        src = sources[k].text.split(/\r\n|\n|\r/g);
        break;
      }
    }
    var s = this.location.start;
    var offset_s = (this.location.source && (typeof this.location.source.offset === "function"))
      ? this.location.source.offset(s)
      : s;
    var loc = this.location.source + ":" + offset_s.line + ":" + offset_s.column;
    if (src) {
      var e = this.location.end;
      var filler = peg$padEnd("", offset_s.line.toString().length, ' ');
      var line = src[s.line - 1];
      var last = s.line === e.line ? e.column : line.length + 1;
      var hatLen = (last - s.column) || 1;
      str += "\n --> " + loc + "\n"
          + filler + " |\n"
          + offset_s.line + " | " + line + "\n"
          + filler + " | " + peg$padEnd("", s.column - 1, ' ')
          + peg$padEnd("", hatLen, "^");
    } else {
      str += "\n at " + loc;
    }
  }
  return str;
};

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
    literal: function(expectation) {
      return "\"" + literalEscape(expectation.text) + "\"";
    },

    class: function(expectation) {
      var escapedParts = expectation.parts.map(function(part) {
        return Array.isArray(part)
          ? classEscape(part[0]) + "-" + classEscape(part[1])
          : classEscape(part);
      });

      return "[" + (expectation.inverted ? "^" : "") + escapedParts.join("") + "]";
    },

    any: function() {
      return "any character";
    },

    end: function() {
      return "end of input";
    },

    other: function(expectation) {
      return expectation.description;
    }
  };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/"/g,  "\\\"")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/\]/g, "\\]")
      .replace(/\^/g, "\\^")
      .replace(/-/g,  "\\-")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = expected.map(describeExpectation);
    var i, j;

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== undefined ? options : {};

  var peg$FAILED = {};
  var peg$source = options.grammarSource;

  var peg$startRuleFunctions = { Start: peg$parseStart };
  var peg$startRuleFunction = peg$parseStart;

  var peg$c0 = "IF";
  var peg$c1 = "ELSE";
  var peg$c2 = "IF-SHEET";
  var peg$c3 = "(";
  var peg$c4 = "&&";
  var peg$c5 = ")";
  var peg$c6 = "HAS-LEVEL";
  var peg$c7 = "HAS-FOCUS-POINTS";
  var peg$c8 = "HAS-PROF";
  var peg$c9 = ":";
  var peg$c10 = "HAS-VISION";
  var peg$c11 = "HAS-FEAT";
  var peg$c12 = "HAS-CLASS-ABILITY";
  var peg$c13 = "HAS-ENABLED-SOURCE";
  var peg$c14 = "HAS-HERITAGE";
  var peg$c15 = "IS-TOGGLED";
  var peg$c16 = "IS-UNARMORED";
  var peg$c17 = "==";
  var peg$c18 = "!=";
  var peg$c19 = ">=";
  var peg$c20 = "<=";
  var peg$c21 = "{";
  var peg$c22 = "}";
  var peg$c23 = "GIVE-ABILITY-BOOST-SINGLE";
  var peg$c24 = "=ALL";
  var peg$c25 = "=";
  var peg$c26 = ",";
  var peg$c27 = "GIVE-ABILITY-BOOST-MULTIPLE";
  var peg$c28 = "give-feat-name";
  var peg$c29 = "GIVE-FEAT-FROM";
  var peg$c30 = "GIVE-FEAT";
  var peg$c31 = "GIVE-GENERAL-FEAT";
  var peg$c32 = "GIVE-SKILL-FEAT";
  var peg$c33 = "GIVE-ANCESTRY-FEAT";
  var peg$c34 = "GIVE-CLASS-FEAT";
  var peg$c35 = "GIVE-ARCHETYPE-FEAT";
  var peg$c36 = "SET-IMPROVISED-WEAPON-NO-PENALTY";
  var peg$c37 = "GIVE-LANG-NAME";
  var peg$c38 = "GIVE-LANG-BONUS-ONLY";
  var peg$c39 = "GIVE-LANG";
  var peg$c40 = "GIVE-PROF-IN";
  var peg$c41 = "GIVE-PROF-INCREASE-IN";
  var peg$c42 = "GIVE-SKILL-INCREASE";
  var peg$c43 = "give-skill";
  var peg$c44 = "GIVE-LORE";
  var peg$c45 = "GIVE-LORE-CHOOSE-INCREASING";
  var peg$c46 = "GIVE-LORE-CHOOSE";
  var peg$c47 = "SET-SPELL-CASTING-TYPE";
  var peg$c48 = "SET-SPELL-TRADITION";
  var peg$c49 = "SET-SPELL-KEY-ABILITY";
  var peg$c50 = "SET-SPELL-SLOTS";
  var peg$c51 = "GIVE-SPELL-SLOT";
  var peg$c52 = "ADD-SPELL-TO-LIST";
  var peg$c53 = "GIVE-FOCUS-SPELL";
  var peg$c54 = "GIVE-FOCUS-POINT";
  var peg$c55 = "GIVE-INNATE-SPELL-NAME";
  var peg$c56 = "GIVE-INNATE-SPELL";
  var peg$c57 = "GIVE-RESISTANCE";
  var peg$c58 = "GIVE-WEAKNESS";
  var peg$c59 = "GIVE-WEAPON-SPECIALIZATION";
  var peg$c60 = "GIVE-GREATER-WEAPON-SPECIALIZATION";
  var peg$c61 = "GIVE-ARMOR-SPECIALIZATION";
  var peg$c62 = "GIVE-WEAPON-CRITICAL-SPECIALIZATION";
  var peg$c63 = "FAMILIAR-GIVE-SPEED";
  var peg$c64 = "FAMILIAR-GIVE-SENSE";
  var peg$c65 = "(imprecise ";
  var peg$c66 = " ";
  var peg$c67 = "ft";
  var peg$c68 = "feet";
  var peg$c69 = "GIVE-CLASS-FEATURE-NAME";
  var peg$c70 = "[NO-CODE]";
  var peg$c71 = "GIVE-CHAR-TRAIT-NAME";
  var peg$c72 = "GIVE-CHAR-TRAIT-COMMON";
  var peg$c73 = "GIVE-CHAR-TRAIT";
  var peg$c74 = "GIVE-DOMAIN-ADVANCEMENT";
  var peg$c75 = "GIVE-DOMAIN";
  var peg$c76 = "GIVE-PHYSICAL-FEATURE-NAME";
  var peg$c77 = "GIVE-SENSE-NAME";
  var peg$c78 = "GIVE-SPEED";
  var peg$c79 = ":LAND_SPEED";
  var peg$c80 = "GIVE-HERITAGE-EFFECTS-ANCESTRY";
  var peg$c81 = "GIVE-HERITAGE-EFFECTS-NAME";
  var peg$c82 = "GIVE-SCFS";
  var peg$c83 = "GIVE-CONDITION";
  var peg$c84 = "REMOVE-CONDITION";
  var peg$c85 = "DEFAULT-WEAPON-RUNE";
  var peg$c86 = "DEFAULT-ARMOR-RUNE";
  var peg$c87 = "CONDITIONAL-";
  var peg$c88 = "INCREASE";
  var peg$c89 = "DECREASE";
  var peg$c90 = "-";
  var peg$c91 = "_";
  var peg$c92 = "~";
  var peg$c93 = "CONDITIONAL";
  var peg$c94 = "OVERRIDE-TEMP_HEALTH";
  var peg$c95 = "LEVEL+CON_MOD";
  var peg$c96 = "OVERRIDE-ARMOR_CHECK_PENALTY";
  var peg$c97 = "ARMOR_SPEED_PENALTY";
  var peg$c98 = "-BASE";
  var peg$c99 = "SHEET-CONCEAL-FEAT-NAME";
  var peg$c100 = "SET-APEX-ABILITY-SCORE";
  var peg$c101 = "SET-SIZE";
  var peg$c102 = "TINY";
  var peg$c103 = "SMALL";
  var peg$c104 = "MEDIUM";
  var peg$c105 = "LARGE";
  var peg$c106 = "HUGE";
  var peg$c107 = "GARGANTUAN";
  var peg$c108 = "GIVE-WEAPON-FAMILIARITY";
  var peg$c109 = "SET-MAP";
  var peg$c110 = "=Tier_";
  var peg$c111 = "DISPLAY-COMPANION-TAB";
  var peg$c112 = "SET-FINESSE-MELEE-USE-DEX-DAMAGE";
  var peg$c113 = "SET-ADD-LEVEL-TO-UNTRAINED-WEAPONS";
  var peg$c114 = "SKILL";
  var peg$c115 = "SAVE";
  var peg$c116 = "SCORE";
  var peg$c117 = "AC";
  var peg$c118 = "perception";
  var peg$c119 = "SPEED";
  var peg$c120 = "BULK_LIMIT";
  var peg$c121 = "INVEST_LIMIT";
  var peg$c122 = "DEX_CAP";
  var peg$c123 = "MAX_HEALTH_BONUS_PER_LEVEL";
  var peg$c124 = "MAX_HEALTH";
  var peg$c125 = "ATTACKS";
  var peg$c126 = "MELEE_ATTACKS";
  var peg$c127 = "MELEE_ATTACKS_DMG_BONUS";
  var peg$c128 = "AGILE_MELEE_ATTACKS_DMG_BONUS";
  var peg$c129 = "ARCANE_SPELL_DC";
  var peg$c130 = "ARCANE_SPELL_ATTACK";
  var peg$c131 = "OCCULT_SPELL_DC";
  var peg$c132 = "OCCULT_SPELL_ATTACK";
  var peg$c133 = "DIVINE_SPELL_DC";
  var peg$c134 = "DIVINE_SPELL_ATTACK";
  var peg$c135 = "PRIMAL_SPELL_DC";
  var peg$c136 = "PRIMAL_SPELL_ATTACK";
  var peg$c137 = "ADD-TEXT";
  var peg$c138 = "GIVE-NOTES-FIELD";
  var peg$c139 = "CLEAR-DATA-FROM-CODE-BLOCK";
  var peg$c140 = "DEFINE-VARIABLE";
  var peg$c141 = "SET-VARIABLE";
  var peg$c142 = ".SET_";
  var peg$c143 = "HIDE-FEAT-NAME";
  var peg$c144 = "OVERRIDE-FEAT-LEVEL";
  var peg$c145 = "SET-KEY-ABILITY";
  var peg$c146 = "str";
  var peg$c147 = "dex";
  var peg$c148 = "con";
  var peg$c149 = "int";
  var peg$c150 = "wis";
  var peg$c151 = "cha";
  var peg$c152 = "burrow";
  var peg$c153 = "climb";
  var peg$c154 = "fly";
  var peg$c155 = "land";
  var peg$c156 = "swim";
  var peg$c157 = "status";
  var peg$c158 = "class";
  var peg$c159 = "heritage";
  var peg$c160 = "life-mystery";
  var peg$c161 = "circum";
  var peg$c162 = "stance";
  var peg$c163 = "item_hide";
  var peg$c164 = "spelldcs";
  var peg$c165 = "spellattacks";
  var peg$c166 = "arcane";
  var peg$c167 = "divine";
  var peg$c168 = "occult";
  var peg$c169 = "primal";
  var peg$c170 = "Level";
  var peg$c171 = "Half_Level";
  var peg$c172 = "+";
  var peg$c173 = ":blue";
  var peg$c174 = "[";
  var peg$c175 = "]";
  var peg$c176 = "\"";

  var peg$r0 = /^[A-Z0-9_]/;
  var peg$r1 = /^[A-Z\-]/;
  var peg$r2 = /^[0-9A-Za-z\-!_'\u2019 ]/;
  var peg$r3 = /^[A-Za-z_ ]/;
  var peg$r4 = /^[0-9A-Za-z\-!.' ]/;
  var peg$r5 = /^[A-Z_]/;
  var peg$r6 = /^[0-9A-Za-z\-_.,'\u2019[\]() ]/;
  var peg$r7 = /^[0-9A-Za-z\-_.,|:\/;~+'\u2019\u2018[\]()* ]/;
  var peg$r8 = /^[^"]/;
  var peg$r9 = /^[UTEML]/;
  var peg$r10 = /^[+\-]/;
  var peg$r11 = /^[0-9]/;
  var peg$r12 = /^[ \t\n\r]/;

  var peg$e0 = peg$literalExpectation("IF", false);
  var peg$e1 = peg$literalExpectation("ELSE", false);
  var peg$e2 = peg$literalExpectation("IF-SHEET", false);
  var peg$e3 = peg$literalExpectation("(", false);
  var peg$e4 = peg$literalExpectation("&&", false);
  var peg$e5 = peg$literalExpectation(")", false);
  var peg$e6 = peg$literalExpectation("HAS-LEVEL", false);
  var peg$e7 = peg$literalExpectation("HAS-FOCUS-POINTS", false);
  var peg$e8 = peg$literalExpectation("HAS-PROF", false);
  var peg$e9 = peg$literalExpectation(":", false);
  var peg$e10 = peg$literalExpectation("HAS-VISION", false);
  var peg$e11 = peg$literalExpectation("HAS-FEAT", false);
  var peg$e12 = peg$literalExpectation("HAS-CLASS-ABILITY", false);
  var peg$e13 = peg$literalExpectation("HAS-ENABLED-SOURCE", false);
  var peg$e14 = peg$literalExpectation("HAS-HERITAGE", false);
  var peg$e15 = peg$literalExpectation("IS-TOGGLED", false);
  var peg$e16 = peg$literalExpectation("IS-UNARMORED", false);
  var peg$e17 = peg$literalExpectation("==", false);
  var peg$e18 = peg$literalExpectation("!=", false);
  var peg$e19 = peg$literalExpectation(">=", false);
  var peg$e20 = peg$literalExpectation("<=", false);
  var peg$e21 = peg$literalExpectation("{", false);
  var peg$e22 = peg$literalExpectation("}", false);
  var peg$e23 = peg$literalExpectation("GIVE-ABILITY-BOOST-SINGLE", false);
  var peg$e24 = peg$literalExpectation("=ALL", false);
  var peg$e25 = peg$literalExpectation("=", false);
  var peg$e26 = peg$literalExpectation(",", false);
  var peg$e27 = peg$literalExpectation("GIVE-ABILITY-BOOST-MULTIPLE", false);
  var peg$e28 = peg$literalExpectation("GIVE-FEAT-NAME", true);
  var peg$e29 = peg$literalExpectation("GIVE-FEAT-FROM", false);
  var peg$e30 = peg$literalExpectation("GIVE-FEAT", false);
  var peg$e31 = peg$literalExpectation("GIVE-GENERAL-FEAT", false);
  var peg$e32 = peg$literalExpectation("GIVE-SKILL-FEAT", false);
  var peg$e33 = peg$literalExpectation("GIVE-ANCESTRY-FEAT", false);
  var peg$e34 = peg$literalExpectation("GIVE-CLASS-FEAT", false);
  var peg$e35 = peg$literalExpectation("GIVE-ARCHETYPE-FEAT", false);
  var peg$e36 = peg$literalExpectation("SET-IMPROVISED-WEAPON-NO-PENALTY", false);
  var peg$e37 = peg$literalExpectation("GIVE-LANG-NAME", false);
  var peg$e38 = peg$literalExpectation("GIVE-LANG-BONUS-ONLY", false);
  var peg$e39 = peg$literalExpectation("GIVE-LANG", false);
  var peg$e40 = peg$literalExpectation("GIVE-PROF-IN", false);
  var peg$e41 = peg$literalExpectation("GIVE-PROF-INCREASE-IN", false);
  var peg$e42 = peg$literalExpectation("GIVE-SKILL-INCREASE", false);
  var peg$e43 = peg$literalExpectation("GIVE-SKILL", true);
  var peg$e44 = peg$literalExpectation("GIVE-LORE", false);
  var peg$e45 = peg$literalExpectation("GIVE-LORE-CHOOSE-INCREASING", false);
  var peg$e46 = peg$literalExpectation("GIVE-LORE-CHOOSE", false);
  var peg$e47 = peg$literalExpectation("SET-SPELL-CASTING-TYPE", false);
  var peg$e48 = peg$literalExpectation("SET-SPELL-TRADITION", false);
  var peg$e49 = peg$literalExpectation("SET-SPELL-KEY-ABILITY", false);
  var peg$e50 = peg$literalExpectation("SET-SPELL-SLOTS", false);
  var peg$e51 = peg$literalExpectation("GIVE-SPELL-SLOT", false);
  var peg$e52 = peg$literalExpectation("ADD-SPELL-TO-LIST", false);
  var peg$e53 = peg$literalExpectation("GIVE-FOCUS-SPELL", false);
  var peg$e54 = peg$literalExpectation("GIVE-FOCUS-POINT", false);
  var peg$e55 = peg$literalExpectation("GIVE-INNATE-SPELL-NAME", false);
  var peg$e56 = peg$literalExpectation("GIVE-INNATE-SPELL", false);
  var peg$e57 = peg$literalExpectation("GIVE-RESISTANCE", false);
  var peg$e58 = peg$literalExpectation("GIVE-WEAKNESS", false);
  var peg$e59 = peg$literalExpectation("GIVE-WEAPON-SPECIALIZATION", false);
  var peg$e60 = peg$literalExpectation("GIVE-GREATER-WEAPON-SPECIALIZATION", false);
  var peg$e61 = peg$literalExpectation("GIVE-ARMOR-SPECIALIZATION", false);
  var peg$e62 = peg$literalExpectation("GIVE-WEAPON-CRITICAL-SPECIALIZATION", false);
  var peg$e63 = peg$literalExpectation("FAMILIAR-GIVE-SPEED", false);
  var peg$e64 = peg$literalExpectation("FAMILIAR-GIVE-SENSE", false);
  var peg$e65 = peg$literalExpectation("(imprecise ", false);
  var peg$e66 = peg$literalExpectation(" ", false);
  var peg$e67 = peg$literalExpectation("ft", false);
  var peg$e68 = peg$literalExpectation("feet", false);
  var peg$e69 = peg$literalExpectation("GIVE-CLASS-FEATURE-NAME", false);
  var peg$e70 = peg$literalExpectation("[NO-CODE]", false);
  var peg$e71 = peg$literalExpectation("GIVE-CHAR-TRAIT-NAME", false);
  var peg$e72 = peg$literalExpectation("GIVE-CHAR-TRAIT-COMMON", false);
  var peg$e73 = peg$literalExpectation("GIVE-CHAR-TRAIT", false);
  var peg$e74 = peg$literalExpectation("GIVE-DOMAIN-ADVANCEMENT", false);
  var peg$e75 = peg$literalExpectation("GIVE-DOMAIN", false);
  var peg$e76 = peg$literalExpectation("GIVE-PHYSICAL-FEATURE-NAME", false);
  var peg$e77 = peg$literalExpectation("GIVE-SENSE-NAME", false);
  var peg$e78 = peg$literalExpectation("GIVE-SPEED", false);
  var peg$e79 = peg$literalExpectation(":LAND_SPEED", false);
  var peg$e80 = peg$literalExpectation("GIVE-HERITAGE-EFFECTS-ANCESTRY", false);
  var peg$e81 = peg$literalExpectation("GIVE-HERITAGE-EFFECTS-NAME", false);
  var peg$e82 = peg$literalExpectation("GIVE-SCFS", false);
  var peg$e83 = peg$literalExpectation("GIVE-CONDITION", false);
  var peg$e84 = peg$literalExpectation("REMOVE-CONDITION", false);
  var peg$e85 = peg$literalExpectation("DEFAULT-WEAPON-RUNE", false);
  var peg$e86 = peg$literalExpectation("DEFAULT-ARMOR-RUNE", false);
  var peg$e87 = peg$literalExpectation("CONDITIONAL-", false);
  var peg$e88 = peg$literalExpectation("INCREASE", false);
  var peg$e89 = peg$literalExpectation("DECREASE", false);
  var peg$e90 = peg$literalExpectation("-", false);
  var peg$e91 = peg$literalExpectation("_", false);
  var peg$e92 = peg$literalExpectation("~", false);
  var peg$e93 = peg$literalExpectation("CONDITIONAL", false);
  var peg$e94 = peg$literalExpectation("OVERRIDE-TEMP_HEALTH", false);
  var peg$e95 = peg$literalExpectation("LEVEL+CON_MOD", false);
  var peg$e96 = peg$literalExpectation("OVERRIDE-ARMOR_CHECK_PENALTY", false);
  var peg$e97 = peg$literalExpectation("ARMOR_SPEED_PENALTY", false);
  var peg$e98 = peg$literalExpectation("-BASE", false);
  var peg$e99 = peg$literalExpectation("SHEET-CONCEAL-FEAT-NAME", false);
  var peg$e100 = peg$literalExpectation("SET-APEX-ABILITY-SCORE", false);
  var peg$e101 = peg$literalExpectation("SET-SIZE", false);
  var peg$e102 = peg$literalExpectation("TINY", false);
  var peg$e103 = peg$literalExpectation("SMALL", false);
  var peg$e104 = peg$literalExpectation("MEDIUM", false);
  var peg$e105 = peg$literalExpectation("LARGE", false);
  var peg$e106 = peg$literalExpectation("HUGE", false);
  var peg$e107 = peg$literalExpectation("GARGANTUAN", false);
  var peg$e108 = peg$literalExpectation("GIVE-WEAPON-FAMILIARITY", false);
  var peg$e109 = peg$literalExpectation("SET-MAP", false);
  var peg$e110 = peg$literalExpectation("=Tier_", false);
  var peg$e111 = peg$literalExpectation("DISPLAY-COMPANION-TAB", false);
  var peg$e112 = peg$literalExpectation("SET-FINESSE-MELEE-USE-DEX-DAMAGE", false);
  var peg$e113 = peg$literalExpectation("SET-ADD-LEVEL-TO-UNTRAINED-WEAPONS", false);
  var peg$e114 = peg$literalExpectation("SKILL", false);
  var peg$e115 = peg$literalExpectation("SAVE", false);
  var peg$e116 = peg$literalExpectation("SCORE", false);
  var peg$e117 = peg$literalExpectation("AC", false);
  var peg$e118 = peg$literalExpectation("PERCEPTION", true);
  var peg$e119 = peg$literalExpectation("SPEED", false);
  var peg$e120 = peg$literalExpectation("BULK_LIMIT", false);
  var peg$e121 = peg$literalExpectation("INVEST_LIMIT", false);
  var peg$e122 = peg$literalExpectation("DEX_CAP", false);
  var peg$e123 = peg$literalExpectation("MAX_HEALTH_BONUS_PER_LEVEL", false);
  var peg$e124 = peg$literalExpectation("MAX_HEALTH", false);
  var peg$e125 = peg$literalExpectation("ATTACKS", false);
  var peg$e126 = peg$literalExpectation("MELEE_ATTACKS", false);
  var peg$e127 = peg$literalExpectation("MELEE_ATTACKS_DMG_BONUS", false);
  var peg$e128 = peg$literalExpectation("AGILE_MELEE_ATTACKS_DMG_BONUS", false);
  var peg$e129 = peg$literalExpectation("ARCANE_SPELL_DC", false);
  var peg$e130 = peg$literalExpectation("ARCANE_SPELL_ATTACK", false);
  var peg$e131 = peg$literalExpectation("OCCULT_SPELL_DC", false);
  var peg$e132 = peg$literalExpectation("OCCULT_SPELL_ATTACK", false);
  var peg$e133 = peg$literalExpectation("DIVINE_SPELL_DC", false);
  var peg$e134 = peg$literalExpectation("DIVINE_SPELL_ATTACK", false);
  var peg$e135 = peg$literalExpectation("PRIMAL_SPELL_DC", false);
  var peg$e136 = peg$literalExpectation("PRIMAL_SPELL_ATTACK", false);
  var peg$e137 = peg$literalExpectation("ADD-TEXT", false);
  var peg$e138 = peg$literalExpectation("GIVE-NOTES-FIELD", false);
  var peg$e139 = peg$literalExpectation("CLEAR-DATA-FROM-CODE-BLOCK", false);
  var peg$e140 = peg$literalExpectation("DEFINE-VARIABLE", false);
  var peg$e141 = peg$literalExpectation("SET-VARIABLE", false);
  var peg$e142 = peg$literalExpectation(".SET_", false);
  var peg$e143 = peg$classExpectation([["A", "Z"], ["0", "9"], "_"], false, false);
  var peg$e144 = peg$literalExpectation("HIDE-FEAT-NAME", false);
  var peg$e145 = peg$literalExpectation("OVERRIDE-FEAT-LEVEL", false);
  var peg$e146 = peg$literalExpectation("SET-KEY-ABILITY", false);
  var peg$e147 = peg$classExpectation([["A", "Z"], "-"], false, false);
  var peg$e148 = peg$classExpectation([["0", "9"], ["A", "Z"], ["a", "z"], "-", "!", "_", "'", "\u2019", " "], false, false);
  var peg$e149 = peg$otherExpectation("ability");
  var peg$e150 = peg$literalExpectation("STR", true);
  var peg$e151 = peg$literalExpectation("DEX", true);
  var peg$e152 = peg$literalExpectation("CON", true);
  var peg$e153 = peg$literalExpectation("INT", true);
  var peg$e154 = peg$literalExpectation("WIS", true);
  var peg$e155 = peg$literalExpectation("CHA", true);
  var peg$e156 = peg$otherExpectation("speed type");
  var peg$e157 = peg$literalExpectation("burrow", true);
  var peg$e158 = peg$literalExpectation("climb", true);
  var peg$e159 = peg$literalExpectation("fly", true);
  var peg$e160 = peg$literalExpectation("land", true);
  var peg$e161 = peg$literalExpectation("swim", true);
  var peg$e162 = peg$literalExpectation("status", true);
  var peg$e163 = peg$literalExpectation("class", true);
  var peg$e164 = peg$literalExpectation("heritage", true);
  var peg$e165 = peg$literalExpectation("life-mystery", true);
  var peg$e166 = peg$literalExpectation("circum", true);
  var peg$e167 = peg$literalExpectation("stance", true);
  var peg$e168 = peg$literalExpectation("item_hide", true);
  var peg$e169 = peg$literalExpectation("spelldcs", true);
  var peg$e170 = peg$literalExpectation("spellattacks", true);
  var peg$e171 = peg$classExpectation([["A", "Z"], ["a", "z"], "_", " "], false, false);
  var peg$e172 = peg$literalExpectation("arcane", true);
  var peg$e173 = peg$literalExpectation("divine", true);
  var peg$e174 = peg$literalExpectation("occult", true);
  var peg$e175 = peg$literalExpectation("primal", true);
  var peg$e176 = peg$classExpectation([["0", "9"], ["A", "Z"], ["a", "z"], "-", "!", ".", "'", " "], false, false);
  var peg$e177 = peg$classExpectation([["A", "Z"], "_"], false, false);
  var peg$e178 = peg$literalExpectation("Level", false);
  var peg$e179 = peg$literalExpectation("Half_Level", false);
  var peg$e180 = peg$literalExpectation("+", false);
  var peg$e181 = peg$literalExpectation(":blue", false);
  var peg$e182 = peg$literalExpectation("[", false);
  var peg$e183 = peg$literalExpectation("]", false);
  var peg$e184 = peg$classExpectation([["0", "9"], ["A", "Z"], ["a", "z"], "-", "_", ".", ",", "'", "\u2019", "[", "]", "(", ")", " "], false, false);
  var peg$e185 = peg$classExpectation([["0", "9"], ["A", "Z"], ["a", "z"], "-", "_", ".", ",", "|", ":", "/", ";", "~", "+", "'", "\u2019", "\u2018", "[", "]", "(", ")", "*", " "], false, false);
  var peg$e186 = peg$literalExpectation("\"", false);
  var peg$e187 = peg$classExpectation(["\""], true, false);
  var peg$e188 = peg$otherExpectation("rank");
  var peg$e189 = peg$classExpectation(["U", "T", "E", "M", "L"], false, false);
  var peg$e190 = peg$classExpectation(["+", "-"], false, false);
  var peg$e191 = peg$classExpectation([["0", "9"]], false, false);
  var peg$e192 = peg$otherExpectation("integer");
  var peg$e193 = peg$otherExpectation("whitespace");
  var peg$e194 = peg$classExpectation([" ", "\t", "\n", "\r"], false, false);

  var peg$f0 = function(conditionals, consequent, elsealternate) { 
          return elsealternate
                ? { conditionals, consequent, alternate: elsealternate }
                : { conditionals, consequent } };
  var peg$f1 = function(conditionals, consequent) { return { conditionals, consequent, sheet: true }};
  var peg$f2 = function(conditionals) { return conditionals };
  var peg$f3 = function(f, op, num) { return c(f, op, num) };
  var peg$f4 = function(f, op, num) { return c(f, op, num) };
  var peg$f5 = function(f, op, name, rank) { return c(f, op, name, rank) };
  var peg$f6 = function(f, op, name) { return c(f, op, name) };
  var peg$f7 = function(f, op, name) { return c(f, op, name) };
  var peg$f8 = function(f, op, name) { return c(f, op, name) };
  var peg$f9 = function(f, op, name) { return c(f, op, name) };
  var peg$f10 = function(f, op, name) { return c(f, op, name) };
  var peg$f11 = function(f, op, toggle) { return c(f, op, toggle) };
  var peg$f12 = function(f) { return c(f) };
  var peg$f13 = function(statement) { return statement };
  var peg$f14 = function(f) { return s(f, ['STR', 'DEX', 'CON', 'INT', 'WIS', 'CHA'] ) };
  var peg$f15 = function(f, abilities) { return s(f, abilities ) };
  var peg$f16 = function(f, num) { return s(f, num ) };
  var peg$f17 = function(f, feat) { return s(f.toUpperCase(), feat) };
  var peg$f18 = function(f, text, choices) { return s(f, text, choices ) };
  var peg$f19 = function(f, level, traits) { return s(f, level, traits ? traits : [] ) };
  var peg$f20 = function(f, level, traits) { return s(f, level, traits ? traits : [] ) };
  var peg$f21 = function(f, level, traits) { return s(f, level, traits ? traits : [] ) };
  var peg$f22 = function(f, level, traits) { return s(f, level, traits ? traits : [] ) };
  var peg$f23 = function(f, level, traits) { return s(f, level, traits ? traits : [] ) };
  var peg$f24 = function(f, level, traits) { return s(f, level, traits ? traits : [] ) };
  var peg$f25 = function(f) { return s(f) };
  var peg$f26 = function(f, language) { return s(f, language) };
  var peg$f27 = function(f) { return s(f) };
  var peg$f28 = function(f) { return s(f) };
  var peg$f29 = function(f, proficiency, rank) { return s(f, proficiency, rank) };
  var peg$f30 = function(f, proficiency) { return s(f, proficiency) };
  var peg$f31 = function(f) { return s(f) };
  var peg$f32 = function(f, rank, choices) { return s(f.toUpperCase(), rank, choices ? choices : [] ) };
  var peg$f33 = function(f, lore) { return s(f, lore) };
  var peg$f34 = function(f) { return s(f) };
  var peg$f35 = function(f) { return s(f) };
  var peg$f36 = function(f, src, type) { return s(f,src,type) };
  var peg$f37 = function(f, src, tradition) { return s(f,src,tradition) };
  var peg$f38 = function(f, src, ability) { return s(f,src,ability) };
  var peg$f39 = function(f, src, algo) { return s(f,src,algo) };
  var peg$f40 = function(f, src, spellLevel) { return s(f,src,spellLevel) };
  var peg$f41 = function(f, src, spell, spellLevel) { return s(f,src,spell,spellLevel) };
  var peg$f42 = function(f, src, spell) { return s(f,src,spell) };
  var peg$f43 = function(f) { return s(f) };
  var peg$f44 = function(f, spell, spellLevel, tradition, perDay) { return s(f,spell,spellLevel,tradition,perDay) };
  var peg$f45 = function(f, spellLevel, tradition, perDay) { return s(f,spellLevel,tradition,perDay) };
  var peg$f46 = function(f, resistance, level) { return s(f,resistance,level) };
  var peg$f47 = function(f, weakness, level) { return s(f,weakness,level) };
  var peg$f48 = function(f) { return s(f) };
  var peg$f49 = function(f) { return s(f) };
  var peg$f50 = function(f, proficiency) { return s(f, proficiency) };
  var peg$f51 = function(f, proficiency) { return s(f, proficiency) };
  var peg$f52 = function(f, type, speed) { return s(f, type, speed) };
  var peg$f53 = function(f, sense, imprecise) { return s(f, sense.trim(), imprecise) };
  var peg$f54 = function(f, feature, nocode) { return s(f, feature, !!nocode) };
  var peg$f55 = function(f, charTrait) { return s(f, charTrait ) };
  var peg$f56 = function(f) { return s(f) };
  var peg$f57 = function(f) { return s(f) };
  var peg$f58 = function(f, src) { return s(f, src) };
  var peg$f59 = function(f, src) { return s(f, src) };
  var peg$f60 = function(f, feature) { return s(f, feature) };
  var peg$f61 = function(f, sense, imprecise) { return s(f, sense.trim(), imprecise) };
  var peg$f62 = function(f, type, speed) { return s(f, type, speed) };
  var peg$f63 = function(f, type) { return s(f, type, 'land_speed') };
  var peg$f64 = function(f, ancestry) { return s(f, ancestry) };
  var peg$f65 = function(f, heritage) { return s(f, heritage) };
  var peg$f66 = function(f, clab, func) { return s(f, clab, func) };
  var peg$f67 = function(f, condition, value) { return s(f, condition, value||null) };
  var peg$f68 = function(f, condition) { return s(f, condition) };
  var peg$f69 = function(f, adjust, rune) { return s(f, adjust, rune) };
  var peg$f70 = function(f, adjust, rune) { return s(f, adjust, rune) };
  var peg$f71 = function(op, primary, secondary, adjust, type, conditional) { return s(
            'ADJUST', primary, secondary||null,
            op == 'DECREASE' ? -adjust : adjust, 
            type, conditional||null) };
  var peg$f72 = function(primary, secondary, text) { return s('ADJUST-CONDITIONAL', primary, secondary, text) };
  var peg$f73 = function(f, math) { return s(f,math) };
  var peg$f74 = function(f, adjust) { return s(f,adjust) };
  var peg$f75 = function(f, feat) { return s(f, feat) };
  var peg$f76 = function(f, ability) { return s(f, ability) };
  var peg$f77 = function(f, size) { return s(f, size.toLowerCase()) };
  var peg$f78 = function(f, name) { return s(f, name) };
  var peg$f79 = function(f, tier) { return s(f, tier) };
  var peg$f80 = function(f) { return s(f) };
  var peg$f81 = function(f) { return s(f) };
  var peg$f82 = function(f) { return s(f) };
  var peg$f83 = function() { return text().toUpperCase(); };
  var peg$f84 = function(f, text) { return s(f, text) };
  var peg$f85 = function(f, text) { return s(f, text) };
  var peg$f86 = function(f) { return s(f) };
  var peg$f87 = function(f, name) { return text().toLowerCase() };
  var peg$f88 = function(f, name, type) { return s(f, name, type) };
  var peg$f89 = function(f, name) { return text() };
  var peg$f90 = function(f, name, mutator, value) { return s(f, name, mutator, value) };
  var peg$f91 = function(f, name) { return s(f, name) };
  var peg$f92 = function(f, feat, level) { return s(f, feat, level) };
  var peg$f93 = function(f, abilities) { return s(f, abilities) };
  var peg$f94 = function(f) { error(`Unimplemented ${f} found in ${input}`) };
  var peg$f95 = function() { return text().toLowerCase() };
  var peg$f96 = function() { return text().toUpperCase() };
  var peg$f97 = function() { return text().toLowerCase() };
  var peg$f98 = function() { return text().toLowerCase() };
  var peg$f99 = function() { return 'circumstance' };
  var peg$f100 = function() { return 'item-hide' };
  var peg$f101 = function(prof, qualifier) { return text() };
  var peg$f102 = function(trad) { return `${trad}_spell_dc` };
  var peg$f103 = function(trad) { return `${trad}_spell_attacks` };
  var peg$f104 = function() { return text().toLowerCase().replace(/\s+/g,'_') };
  var peg$f105 = function() { return text().toLowerCase(); };
  var peg$f106 = function(variable) { return '$'+variable };
  var peg$f107 = function() { return text() };
  var peg$f108 = function() { return text() };
  var peg$f109 = function() { return [ 'current', null ]};
  var peg$f110 = function(rel) { return [ 'half', rel || null ]};
  var peg$f111 = function(ability, rel) { return [ ability, rel || null ]};
  var peg$f112 = function(abs) { return [ 'absolute', abs ]};
  var peg$f113 = function(level, blue) { return level; };
  var peg$f114 = function(name, traits) { return traits ? [ name, ...traits ] : [ name ]};
  var peg$f115 = function(choices) { return choices };
  var peg$f116 = function() { return text() };
  var peg$f117 = function() { return text() };
  var peg$f118 = function() { return JSON.parse(text()) };
  var peg$f119 = function() { return text() };
  var peg$f120 = function() { return text() };
  var peg$f121 = function() { return text() };
  var peg$f122 = function() { return parseInt(text(), 10) };
  var peg$currPos = 0;
  var peg$savedPos = 0;
  var peg$posDetailsCache = [{ line: 1, column: 1 }];
  var peg$maxFailPos = 0;
  var peg$maxFailExpected = [];
  var peg$silentFails = 0;

  var peg$result;

  if ("startRule" in options) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function offset() {
    return peg$savedPos;
  }

  function range() {
    return {
      source: peg$source,
      start: peg$savedPos,
      end: peg$currPos
    };
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos];
    var p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line: details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;

      return details;
    }
  }

  function peg$computeLocation(startPos, endPos, offset) {
    var startPosDetails = peg$computePosDetails(startPos);
    var endPosDetails = peg$computePosDetails(endPos);

    var res = {
      source: peg$source,
      start: {
        offset: startPos,
        line: startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line: endPosDetails.line,
        column: endPosDetails.column
      }
    };
    if (offset && peg$source && (typeof peg$source.offset === "function")) {
      res.start = peg$source.offset(res.start);
      res.end = peg$source.offset(res.end);
    }
    return res;
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$parseStart() {
    var s0;

    s0 = peg$parseExpression();

    return s0;
  }

  function peg$parseExpression() {
    var s0;

    s0 = peg$parseIfElse();
    if (s0 === peg$FAILED) {
      s0 = peg$parseIfSheet();
      if (s0 === peg$FAILED) {
        s0 = peg$parseStatement();
      }
    }

    return s0;
  }

  function peg$parseIfElse() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c0) {
      s1 = peg$c0;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e0); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseConditionals();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseBracketedStatement();
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s7 = peg$currPos;
          if (input.substr(peg$currPos, 4) === peg$c1) {
            s8 = peg$c1;
            peg$currPos += 4;
          } else {
            s8 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e1); }
          }
          if (s8 !== peg$FAILED) {
            s9 = peg$parse_();
            s10 = peg$parseBracketedStatement();
            if (s10 !== peg$FAILED) {
              s7 = s10;
            } else {
              peg$currPos = s7;
              s7 = peg$FAILED;
            }
          } else {
            peg$currPos = s7;
            s7 = peg$FAILED;
          }
          if (s7 === peg$FAILED) {
            s7 = null;
          }
          peg$savedPos = s0;
          s0 = peg$f0(s3, s5, s7);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseIfSheet() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8) === peg$c2) {
      s1 = peg$c2;
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e2); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseConditionals();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseBracketedStatement();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f1(s3, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseConditionals() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 40) {
      s1 = peg$c3;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e3); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = [];
      s4 = peg$parseConditional();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$currPos;
        s5 = peg$currPos;
        s6 = peg$parse_();
        if (input.substr(peg$currPos, 2) === peg$c4) {
          s7 = peg$c4;
          peg$currPos += 2;
        } else {
          s7 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e4); }
        }
        if (s7 !== peg$FAILED) {
          s8 = peg$parse_();
          s6 = [s6, s7, s8];
          s5 = s6;
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        if (s5 !== peg$FAILED) {
          s5 = peg$parseConditional();
          if (s5 === peg$FAILED) {
            peg$currPos = s4;
            s4 = peg$FAILED;
          } else {
            s4 = s5;
          }
        } else {
          s4 = s5;
        }
      }
      if (s3.length < 1) {
        peg$currPos = s2;
        s2 = peg$FAILED;
      } else {
        s2 = s3;
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 41) {
          s3 = peg$c5;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e5); }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f2(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseConditional() {
    var s0;

    s0 = peg$parseNumericalConditional();
    if (s0 === peg$FAILED) {
      s0 = peg$parseProficiencyConditional();
      if (s0 === peg$FAILED) {
        s0 = peg$parseNameConditional();
        if (s0 === peg$FAILED) {
          s0 = peg$parseToggledConditional();
          if (s0 === peg$FAILED) {
            s0 = peg$parseBooleanConditional();
          }
        }
      }
    }

    return s0;
  }

  function peg$parseNumericalConditional() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 9) === peg$c6) {
      s1 = peg$c6;
      peg$currPos += 9;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e6); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseAnyOp();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseInteger();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f3(s1, s2, s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 16) === peg$c7) {
        s1 = peg$c7;
        peg$currPos += 16;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e7); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseAnyOp();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseInteger();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f4(s1, s2, s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseProficiencyConditional() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8) === peg$c8) {
      s1 = peg$c8;
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e8); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseAnyOp();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseProficiency();
        if (s3 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 58) {
            s4 = peg$c9;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e9); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseRank();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f5(s1, s2, s3, s5);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseNameConditional() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 10) === peg$c10) {
      s1 = peg$c10;
      peg$currPos += 10;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e10); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseEqOp();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseName();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f6(s1, s2, s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 8) === peg$c11) {
        s1 = peg$c11;
        peg$currPos += 8;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e11); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseEqOp();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseName();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f7(s1, s2, s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 17) === peg$c12) {
          s1 = peg$c12;
          peg$currPos += 17;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e12); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseEqOp();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseName();
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f8(s1, s2, s3);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 18) === peg$c13) {
            s1 = peg$c13;
            peg$currPos += 18;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e13); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseEqOp();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseName();
              if (s3 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f9(s1, s2, s3);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 12) === peg$c14) {
              s1 = peg$c14;
              peg$currPos += 12;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e14); }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parseEqOp();
              if (s2 !== peg$FAILED) {
                s3 = peg$parseName();
                if (s3 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f10(s1, s2, s3);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseToggledConditional() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 10) === peg$c15) {
      s1 = peg$c15;
      peg$currPos += 10;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e15); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseEqOp();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseName();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f11(s1, s2, s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseBooleanConditional() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 12) === peg$c16) {
      s1 = peg$c16;
      peg$currPos += 12;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e16); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f12(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseAnyOp() {
    var s0;

    s0 = peg$parseEqOp();
    if (s0 === peg$FAILED) {
      s0 = peg$parseRelOp();
    }

    return s0;
  }

  function peg$parseEqOp() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c17) {
      s0 = peg$c17;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e17); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c18) {
        s0 = peg$c18;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e18); }
      }
    }

    return s0;
  }

  function peg$parseRelOp() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c19) {
      s0 = peg$c19;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e19); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c20) {
        s0 = peg$c20;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e20); }
      }
    }

    return s0;
  }

  function peg$parseBracketedStatement() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 123) {
      s1 = peg$c21;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e21); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseStatement();
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 125) {
          s5 = peg$c22;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f13(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseStatement() {
    var s0;

    s0 = peg$parseBoostsStmt();
    if (s0 === peg$FAILED) {
      s0 = peg$parseFeatStmt();
      if (s0 === peg$FAILED) {
        s0 = peg$parseLanguageStmt();
        if (s0 === peg$FAILED) {
          s0 = peg$parseProficienciesStmt();
          if (s0 === peg$FAILED) {
            s0 = peg$parseSkillStmt();
            if (s0 === peg$FAILED) {
              s0 = peg$parseLoreStmt();
              if (s0 === peg$FAILED) {
                s0 = peg$parseSpellStmt();
                if (s0 === peg$FAILED) {
                  s0 = peg$parseResistWeakStmt();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseSpecializationStmt();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parseFamiliarStmt();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parseMiscellaneousStmt();
                        if (s0 === peg$FAILED) {
                          s0 = peg$parseSheetStmt();
                          if (s0 === peg$FAILED) {
                            s0 = peg$parseUniversalStmt();
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseSheetStmt() {
    var s0;

    s0 = peg$parseConditionStmt();
    if (s0 === peg$FAILED) {
      s0 = peg$parseItemDefaultStmt();
      if (s0 === peg$FAILED) {
        s0 = peg$parseStatAdjustmentStmt();
        if (s0 === peg$FAILED) {
          s0 = peg$parseMiscSheetStmt();
        }
      }
    }

    return s0;
  }

  function peg$parseBoostsStmt() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 25) === peg$c23) {
      s1 = peg$c23;
      peg$currPos += 25;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e23); }
    }
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 4) === peg$c24) {
        s2 = peg$c24;
        peg$currPos += 4;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e24); }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f14(s1);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 25) === peg$c23) {
        s1 = peg$c23;
        peg$currPos += 25;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e23); }
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 61) {
          s2 = peg$c25;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e25); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = [];
          s5 = peg$parseAbility();
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 44) {
              s6 = peg$c26;
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e26); }
            }
            if (s6 !== peg$FAILED) {
              s6 = peg$parseAbility();
              if (s6 === peg$FAILED) {
                peg$currPos = s5;
                s5 = peg$FAILED;
              } else {
                s5 = s6;
              }
            } else {
              s5 = s6;
            }
          }
          if (s4.length < 1) {
            peg$currPos = s3;
            s3 = peg$FAILED;
          } else {
            s3 = s4;
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f15(s1, s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 27) === peg$c27) {
          s1 = peg$c27;
          peg$currPos += 27;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e27); }
        }
        if (s1 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 61) {
            s2 = peg$c25;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e25); }
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parseInteger();
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f16(s1, s3);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }

    return s0;
  }

  function peg$parseFeatStmt() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 14).toLowerCase() === peg$c28) {
      s1 = input.substr(peg$currPos, 14);
      peg$currPos += 14;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e28); }
    }
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 61) {
        s2 = peg$c25;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e25); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseFeat();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f17(s1, s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 14) === peg$c29) {
        s1 = peg$c29;
        peg$currPos += 14;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e29); }
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 61) {
          s2 = peg$c25;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e25); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseText();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 58) {
              s4 = peg$c9;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e9); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$currPos;
              s6 = [];
              s7 = peg$parseFromChoice();
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 44) {
                  s8 = peg$c26;
                  peg$currPos++;
                } else {
                  s8 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e26); }
                }
                if (s8 !== peg$FAILED) {
                  s8 = peg$parseFromChoice();
                  if (s8 === peg$FAILED) {
                    peg$currPos = s7;
                    s7 = peg$FAILED;
                  } else {
                    s7 = s8;
                  }
                } else {
                  s7 = s8;
                }
              }
              if (s6.length < 1) {
                peg$currPos = s5;
                s5 = peg$FAILED;
              } else {
                s5 = s6;
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f18(s1, s3, s5);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 9) === peg$c30) {
          s1 = peg$c30;
          peg$currPos += 9;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e30); }
        }
        if (s1 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 61) {
            s2 = peg$c25;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e25); }
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parseLevel();
            if (s3 !== peg$FAILED) {
              s4 = peg$parseChoices();
              if (s4 === peg$FAILED) {
                s4 = null;
              }
              peg$savedPos = s0;
              s0 = peg$f19(s1, s3, s4);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 17) === peg$c31) {
            s1 = peg$c31;
            peg$currPos += 17;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e31); }
          }
          if (s1 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 61) {
              s2 = peg$c25;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e25); }
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parseLevel();
              if (s3 !== peg$FAILED) {
                s4 = peg$parseChoices();
                if (s4 === peg$FAILED) {
                  s4 = null;
                }
                peg$savedPos = s0;
                s0 = peg$f20(s1, s3, s4);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 15) === peg$c32) {
              s1 = peg$c32;
              peg$currPos += 15;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e32); }
            }
            if (s1 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 61) {
                s2 = peg$c25;
                peg$currPos++;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e25); }
              }
              if (s2 !== peg$FAILED) {
                s3 = peg$parseLevel();
                if (s3 !== peg$FAILED) {
                  s4 = peg$parseChoices();
                  if (s4 === peg$FAILED) {
                    s4 = null;
                  }
                  peg$savedPos = s0;
                  s0 = peg$f21(s1, s3, s4);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.substr(peg$currPos, 18) === peg$c33) {
                s1 = peg$c33;
                peg$currPos += 18;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e33); }
              }
              if (s1 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 61) {
                  s2 = peg$c25;
                  peg$currPos++;
                } else {
                  s2 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e25); }
                }
                if (s2 !== peg$FAILED) {
                  s3 = peg$parseLevel();
                  if (s3 !== peg$FAILED) {
                    s4 = peg$parseChoices();
                    if (s4 === peg$FAILED) {
                      s4 = null;
                    }
                    peg$savedPos = s0;
                    s0 = peg$f22(s1, s3, s4);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.substr(peg$currPos, 15) === peg$c34) {
                  s1 = peg$c34;
                  peg$currPos += 15;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e34); }
                }
                if (s1 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 61) {
                    s2 = peg$c25;
                    peg$currPos++;
                  } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e25); }
                  }
                  if (s2 !== peg$FAILED) {
                    s3 = peg$parseLevel();
                    if (s3 !== peg$FAILED) {
                      s4 = peg$parseChoices();
                      if (s4 === peg$FAILED) {
                        s4 = null;
                      }
                      peg$savedPos = s0;
                      s0 = peg$f23(s1, s3, s4);
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  if (input.substr(peg$currPos, 19) === peg$c35) {
                    s1 = peg$c35;
                    peg$currPos += 19;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e35); }
                  }
                  if (s1 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 61) {
                      s2 = peg$c25;
                      peg$currPos++;
                    } else {
                      s2 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e25); }
                    }
                    if (s2 !== peg$FAILED) {
                      s3 = peg$parseLevel();
                      if (s3 !== peg$FAILED) {
                        s4 = peg$parseChoices();
                        if (s4 === peg$FAILED) {
                          s4 = null;
                        }
                        peg$savedPos = s0;
                        s0 = peg$f24(s1, s3, s4);
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.substr(peg$currPos, 32) === peg$c36) {
                      s1 = peg$c36;
                      peg$currPos += 32;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e36); }
                    }
                    if (s1 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$f25(s1);
                    }
                    s0 = s1;
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseLanguageStmt() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 14) === peg$c37) {
      s1 = peg$c37;
      peg$currPos += 14;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e37); }
    }
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 61) {
        s2 = peg$c25;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e25); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseName();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f26(s1, s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 20) === peg$c38) {
        s1 = peg$c38;
        peg$currPos += 20;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e38); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f27(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 9) === peg$c39) {
          s1 = peg$c39;
          peg$currPos += 9;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e39); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f28(s1);
        }
        s0 = s1;
      }
    }

    return s0;
  }

  function peg$parseProficienciesStmt() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 12) === peg$c40) {
      s1 = peg$c40;
      peg$currPos += 12;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e40); }
    }
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 61) {
        s2 = peg$c25;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e25); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseProficiency();
        if (s3 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 58) {
            s4 = peg$c9;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e9); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseRank();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f29(s1, s3, s5);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 21) === peg$c41) {
        s1 = peg$c41;
        peg$currPos += 21;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e41); }
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 61) {
          s2 = peg$c25;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e25); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseProficiency();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f30(s1, s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseSkillStmt() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 19) === peg$c42) {
      s1 = peg$c42;
      peg$currPos += 19;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e42); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f31(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 10).toLowerCase() === peg$c43) {
        s1 = input.substr(peg$currPos, 10);
        peg$currPos += 10;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e43); }
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 61) {
          s2 = peg$c25;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e25); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseRank();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseChoices();
            if (s4 === peg$FAILED) {
              s4 = null;
            }
            peg$savedPos = s0;
            s0 = peg$f32(s1, s3, s4);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseLoreStmt() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 9) === peg$c44) {
      s1 = peg$c44;
      peg$currPos += 9;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e44); }
    }
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 61) {
        s2 = peg$c25;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e25); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseText();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f33(s1, s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 27) === peg$c45) {
        s1 = peg$c45;
        peg$currPos += 27;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e45); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f34(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 16) === peg$c46) {
          s1 = peg$c46;
          peg$currPos += 16;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e46); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f35(s1);
        }
        s0 = s1;
      }
    }

    return s0;
  }

  function peg$parseSpellStmt() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 22) === peg$c47) {
      s1 = peg$c47;
      peg$currPos += 22;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e47); }
    }
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 61) {
        s2 = peg$c25;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e25); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseName();
        if (s3 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 58) {
            s4 = peg$c9;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e9); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseName();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f36(s1, s3, s5);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 19) === peg$c48) {
        s1 = peg$c48;
        peg$currPos += 19;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e48); }
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 61) {
          s2 = peg$c25;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e25); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseName();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 58) {
              s4 = peg$c9;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e9); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseName();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f37(s1, s3, s5);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 21) === peg$c49) {
          s1 = peg$c49;
          peg$currPos += 21;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e49); }
        }
        if (s1 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 61) {
            s2 = peg$c25;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e25); }
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parseName();
            if (s3 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 58) {
                s4 = peg$c9;
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e9); }
              }
              if (s4 !== peg$FAILED) {
                s5 = peg$parseAbility();
                if (s5 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f38(s1, s3, s5);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 15) === peg$c50) {
            s1 = peg$c50;
            peg$currPos += 15;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e50); }
          }
          if (s1 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 61) {
              s2 = peg$c25;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e25); }
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parseName();
              if (s3 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 58) {
                  s4 = peg$c9;
                  peg$currPos++;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e9); }
                }
                if (s4 !== peg$FAILED) {
                  s5 = peg$parseName();
                  if (s5 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s0 = peg$f39(s1, s3, s5);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 15) === peg$c51) {
              s1 = peg$c51;
              peg$currPos += 15;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e51); }
            }
            if (s1 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 61) {
                s2 = peg$c25;
                peg$currPos++;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e25); }
              }
              if (s2 !== peg$FAILED) {
                s3 = peg$parseName();
                if (s3 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 58) {
                    s4 = peg$c9;
                    peg$currPos++;
                  } else {
                    s4 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e9); }
                  }
                  if (s4 !== peg$FAILED) {
                    s5 = peg$parseSpellLevel();
                    if (s5 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s0 = peg$f40(s1, s3, s5);
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.substr(peg$currPos, 17) === peg$c52) {
                s1 = peg$c52;
                peg$currPos += 17;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e52); }
              }
              if (s1 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 61) {
                  s2 = peg$c25;
                  peg$currPos++;
                } else {
                  s2 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e25); }
                }
                if (s2 !== peg$FAILED) {
                  s3 = peg$parseName();
                  if (s3 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 58) {
                      s4 = peg$c9;
                      peg$currPos++;
                    } else {
                      s4 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e9); }
                    }
                    if (s4 !== peg$FAILED) {
                      s5 = peg$parseName();
                      if (s5 !== peg$FAILED) {
                        s6 = peg$currPos;
                        if (input.charCodeAt(peg$currPos) === 58) {
                          s7 = peg$c9;
                          peg$currPos++;
                        } else {
                          s7 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e9); }
                        }
                        if (s7 !== peg$FAILED) {
                          s8 = peg$parseSpellLevel();
                          if (s8 !== peg$FAILED) {
                            s6 = s8;
                          } else {
                            peg$currPos = s6;
                            s6 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s6;
                          s6 = peg$FAILED;
                        }
                        if (s6 === peg$FAILED) {
                          s6 = null;
                        }
                        peg$savedPos = s0;
                        s0 = peg$f41(s1, s3, s5, s6);
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.substr(peg$currPos, 16) === peg$c53) {
                  s1 = peg$c53;
                  peg$currPos += 16;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e53); }
                }
                if (s1 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 61) {
                    s2 = peg$c25;
                    peg$currPos++;
                  } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e25); }
                  }
                  if (s2 !== peg$FAILED) {
                    s3 = peg$parseName();
                    if (s3 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 58) {
                        s4 = peg$c9;
                        peg$currPos++;
                      } else {
                        s4 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e9); }
                      }
                      if (s4 !== peg$FAILED) {
                        s5 = peg$parseName();
                        if (s5 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s0 = peg$f42(s1, s3, s5);
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  if (input.substr(peg$currPos, 16) === peg$c54) {
                    s1 = peg$c54;
                    peg$currPos += 16;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e54); }
                  }
                  if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$f43(s1);
                  }
                  s0 = s1;
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.substr(peg$currPos, 22) === peg$c55) {
                      s1 = peg$c55;
                      peg$currPos += 22;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e55); }
                    }
                    if (s1 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 61) {
                        s2 = peg$c25;
                        peg$currPos++;
                      } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e25); }
                      }
                      if (s2 !== peg$FAILED) {
                        s3 = peg$parseName();
                        if (s3 !== peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 58) {
                            s4 = peg$c9;
                            peg$currPos++;
                          } else {
                            s4 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$e9); }
                          }
                          if (s4 !== peg$FAILED) {
                            s5 = peg$parseSpellLevel();
                            if (s5 !== peg$FAILED) {
                              if (input.charCodeAt(peg$currPos) === 58) {
                                s6 = peg$c9;
                                peg$currPos++;
                              } else {
                                s6 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$e9); }
                              }
                              if (s6 !== peg$FAILED) {
                                s7 = peg$parseName();
                                if (s7 !== peg$FAILED) {
                                  if (input.charCodeAt(peg$currPos) === 58) {
                                    s8 = peg$c9;
                                    peg$currPos++;
                                  } else {
                                    s8 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$e9); }
                                  }
                                  if (s8 !== peg$FAILED) {
                                    s9 = peg$parseInteger();
                                    if (s9 !== peg$FAILED) {
                                      peg$savedPos = s0;
                                      s0 = peg$f44(s1, s3, s5, s7, s9);
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      if (input.substr(peg$currPos, 17) === peg$c56) {
                        s1 = peg$c56;
                        peg$currPos += 17;
                      } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e56); }
                      }
                      if (s1 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 61) {
                          s2 = peg$c25;
                          peg$currPos++;
                        } else {
                          s2 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e25); }
                        }
                        if (s2 !== peg$FAILED) {
                          s3 = peg$parseSpellLevel();
                          if (s3 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 58) {
                              s4 = peg$c9;
                              peg$currPos++;
                            } else {
                              s4 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$e9); }
                            }
                            if (s4 !== peg$FAILED) {
                              s5 = peg$parseName();
                              if (s5 !== peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 58) {
                                  s6 = peg$c9;
                                  peg$currPos++;
                                } else {
                                  s6 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$e9); }
                                }
                                if (s6 !== peg$FAILED) {
                                  s7 = peg$parseInteger();
                                  if (s7 !== peg$FAILED) {
                                    peg$savedPos = s0;
                                    s0 = peg$f45(s1, s3, s5, s7);
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseResistWeakStmt() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 15) === peg$c57) {
      s1 = peg$c57;
      peg$currPos += 15;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e57); }
    }
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 61) {
        s2 = peg$c25;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e25); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseName();
        if (s3 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 58) {
            s4 = peg$c9;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e9); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseLevel();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f46(s1, s3, s5);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 13) === peg$c58) {
        s1 = peg$c58;
        peg$currPos += 13;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e58); }
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 61) {
          s2 = peg$c25;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e25); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseName();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 58) {
              s4 = peg$c9;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e9); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseLevel();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f47(s1, s3, s5);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseSpecializationStmt() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 26) === peg$c59) {
      s1 = peg$c59;
      peg$currPos += 26;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e59); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f48(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 34) === peg$c60) {
        s1 = peg$c60;
        peg$currPos += 34;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e60); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f49(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 25) === peg$c61) {
          s1 = peg$c61;
          peg$currPos += 25;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e61); }
        }
        if (s1 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 61) {
            s2 = peg$c25;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e25); }
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parseProficiency();
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f50(s1, s3);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 35) === peg$c62) {
            s1 = peg$c62;
            peg$currPos += 35;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e62); }
          }
          if (s1 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 61) {
              s2 = peg$c25;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e25); }
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parseProficiency();
              if (s3 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f51(s1, s3);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
      }
    }

    return s0;
  }

  function peg$parseFamiliarStmt() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 19) === peg$c63) {
      s1 = peg$c63;
      peg$currPos += 19;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e63); }
    }
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 61) {
        s2 = peg$c25;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e25); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseSpeedType();
        if (s3 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 58) {
            s4 = peg$c9;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e9); }
          }
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          s5 = peg$parse_();
          s6 = peg$parseInteger();
          if (s6 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f52(s1, s3, s6);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 19) === peg$c64) {
        s1 = peg$c64;
        peg$currPos += 19;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e64); }
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 61) {
          s2 = peg$c25;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e25); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseName();
          if (s3 !== peg$FAILED) {
            s4 = peg$currPos;
            if (input.substr(peg$currPos, 11) === peg$c65) {
              s5 = peg$c65;
              peg$currPos += 11;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e65); }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parseInteger();
              if (s6 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 32) {
                  s7 = peg$c66;
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e66); }
                }
                if (s7 !== peg$FAILED) {
                  if (input.substr(peg$currPos, 2) === peg$c67) {
                    s8 = peg$c67;
                    peg$currPos += 2;
                  } else {
                    s8 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e67); }
                  }
                  if (s8 === peg$FAILED) {
                    if (input.substr(peg$currPos, 4) === peg$c68) {
                      s8 = peg$c68;
                      peg$currPos += 4;
                    } else {
                      s8 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e68); }
                    }
                  }
                  if (s8 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 41) {
                      s9 = peg$c5;
                      peg$currPos++;
                    } else {
                      s9 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e5); }
                    }
                    if (s9 !== peg$FAILED) {
                      s4 = s6;
                    } else {
                      peg$currPos = s4;
                      s4 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
            if (s4 === peg$FAILED) {
              s4 = null;
            }
            peg$savedPos = s0;
            s0 = peg$f53(s1, s3, s4);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseMiscellaneousStmt() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 23) === peg$c69) {
      s1 = peg$c69;
      peg$currPos += 23;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e69); }
    }
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 61) {
        s2 = peg$c25;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e25); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseName();
        if (s3 !== peg$FAILED) {
          if (input.substr(peg$currPos, 9) === peg$c70) {
            s4 = peg$c70;
            peg$currPos += 9;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e70); }
          }
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          peg$savedPos = s0;
          s0 = peg$f54(s1, s3, s4);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 20) === peg$c71) {
        s1 = peg$c71;
        peg$currPos += 20;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e71); }
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 61) {
          s2 = peg$c25;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e25); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseText();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f55(s1, s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 22) === peg$c72) {
          s1 = peg$c72;
          peg$currPos += 22;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e72); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f56(s1);
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 15) === peg$c73) {
            s1 = peg$c73;
            peg$currPos += 15;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e73); }
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f57(s1);
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 23) === peg$c74) {
              s1 = peg$c74;
              peg$currPos += 23;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e74); }
            }
            if (s1 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 61) {
                s2 = peg$c25;
                peg$currPos++;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e25); }
              }
              if (s2 !== peg$FAILED) {
                s3 = peg$parseName();
                if (s3 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f58(s1, s3);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.substr(peg$currPos, 11) === peg$c75) {
                s1 = peg$c75;
                peg$currPos += 11;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e75); }
              }
              if (s1 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 61) {
                  s2 = peg$c25;
                  peg$currPos++;
                } else {
                  s2 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e25); }
                }
                if (s2 !== peg$FAILED) {
                  s3 = peg$parseName();
                  if (s3 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s0 = peg$f59(s1, s3);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.substr(peg$currPos, 26) === peg$c76) {
                  s1 = peg$c76;
                  peg$currPos += 26;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e76); }
                }
                if (s1 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 61) {
                    s2 = peg$c25;
                    peg$currPos++;
                  } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e25); }
                  }
                  if (s2 !== peg$FAILED) {
                    s3 = peg$parseName();
                    if (s3 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s0 = peg$f60(s1, s3);
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  if (input.substr(peg$currPos, 15) === peg$c77) {
                    s1 = peg$c77;
                    peg$currPos += 15;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e77); }
                  }
                  if (s1 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 61) {
                      s2 = peg$c25;
                      peg$currPos++;
                    } else {
                      s2 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e25); }
                    }
                    if (s2 !== peg$FAILED) {
                      s3 = peg$parseName();
                      if (s3 !== peg$FAILED) {
                        s4 = peg$currPos;
                        if (input.substr(peg$currPos, 11) === peg$c65) {
                          s5 = peg$c65;
                          peg$currPos += 11;
                        } else {
                          s5 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e65); }
                        }
                        if (s5 !== peg$FAILED) {
                          s6 = peg$parseInteger();
                          if (s6 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 32) {
                              s7 = peg$c66;
                              peg$currPos++;
                            } else {
                              s7 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$e66); }
                            }
                            if (s7 !== peg$FAILED) {
                              if (input.substr(peg$currPos, 2) === peg$c67) {
                                s8 = peg$c67;
                                peg$currPos += 2;
                              } else {
                                s8 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$e67); }
                              }
                              if (s8 === peg$FAILED) {
                                if (input.substr(peg$currPos, 4) === peg$c68) {
                                  s8 = peg$c68;
                                  peg$currPos += 4;
                                } else {
                                  s8 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$e68); }
                                }
                              }
                              if (s8 !== peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 41) {
                                  s9 = peg$c5;
                                  peg$currPos++;
                                } else {
                                  s9 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$e5); }
                                }
                                if (s9 !== peg$FAILED) {
                                  s4 = s6;
                                } else {
                                  peg$currPos = s4;
                                  s4 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s4;
                                s4 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s4;
                              s4 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s4;
                            s4 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s4;
                          s4 = peg$FAILED;
                        }
                        if (s4 === peg$FAILED) {
                          s4 = null;
                        }
                        peg$savedPos = s0;
                        s0 = peg$f61(s1, s3, s4);
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.substr(peg$currPos, 10) === peg$c78) {
                      s1 = peg$c78;
                      peg$currPos += 10;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e78); }
                    }
                    if (s1 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 61) {
                        s2 = peg$c25;
                        peg$currPos++;
                      } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e25); }
                      }
                      if (s2 !== peg$FAILED) {
                        s3 = peg$parseSpeedType();
                        if (s3 !== peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 58) {
                            s4 = peg$c9;
                            peg$currPos++;
                          } else {
                            s4 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$e9); }
                          }
                          if (s4 !== peg$FAILED) {
                            s5 = peg$parseInteger();
                            if (s5 !== peg$FAILED) {
                              peg$savedPos = s0;
                              s0 = peg$f62(s1, s3, s5);
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      if (input.substr(peg$currPos, 10) === peg$c78) {
                        s1 = peg$c78;
                        peg$currPos += 10;
                      } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e78); }
                      }
                      if (s1 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 61) {
                          s2 = peg$c25;
                          peg$currPos++;
                        } else {
                          s2 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e25); }
                        }
                        if (s2 !== peg$FAILED) {
                          s3 = peg$parseSpeedType();
                          if (s3 !== peg$FAILED) {
                            if (input.substr(peg$currPos, 11) === peg$c79) {
                              s4 = peg$c79;
                              peg$currPos += 11;
                            } else {
                              s4 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$e79); }
                            }
                            if (s4 !== peg$FAILED) {
                              peg$savedPos = s0;
                              s0 = peg$f63(s1, s3);
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                      if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        if (input.substr(peg$currPos, 30) === peg$c80) {
                          s1 = peg$c80;
                          peg$currPos += 30;
                        } else {
                          s1 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e80); }
                        }
                        if (s1 !== peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 61) {
                            s2 = peg$c25;
                            peg$currPos++;
                          } else {
                            s2 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$e25); }
                          }
                          if (s2 !== peg$FAILED) {
                            s3 = peg$parseName();
                            if (s3 !== peg$FAILED) {
                              peg$savedPos = s0;
                              s0 = peg$f64(s1, s3);
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                        if (s0 === peg$FAILED) {
                          s0 = peg$currPos;
                          if (input.substr(peg$currPos, 26) === peg$c81) {
                            s1 = peg$c81;
                            peg$currPos += 26;
                          } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$e81); }
                          }
                          if (s1 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 61) {
                              s2 = peg$c25;
                              peg$currPos++;
                            } else {
                              s2 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$e25); }
                            }
                            if (s2 !== peg$FAILED) {
                              s3 = peg$parseName();
                              if (s3 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s0 = peg$f65(s1, s3);
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                          if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            if (input.substr(peg$currPos, 9) === peg$c82) {
                              s1 = peg$c82;
                              peg$currPos += 9;
                            } else {
                              s1 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$e82); }
                            }
                            if (s1 !== peg$FAILED) {
                              if (input.charCodeAt(peg$currPos) === 61) {
                                s2 = peg$c25;
                                peg$currPos++;
                              } else {
                                s2 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$e25); }
                              }
                              if (s2 !== peg$FAILED) {
                                s3 = peg$parseName();
                                if (s3 !== peg$FAILED) {
                                  if (input.charCodeAt(peg$currPos) === 58) {
                                    s4 = peg$c9;
                                    peg$currPos++;
                                  } else {
                                    s4 = peg$FAILED;
                                    if (peg$silentFails === 0) { peg$fail(peg$e9); }
                                  }
                                  if (s4 !== peg$FAILED) {
                                    s5 = peg$parseName();
                                    if (s5 !== peg$FAILED) {
                                      peg$savedPos = s0;
                                      s0 = peg$f66(s1, s3, s5);
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseConditionStmt() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 14) === peg$c83) {
      s1 = peg$c83;
      peg$currPos += 14;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e83); }
    }
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 61) {
        s2 = peg$c25;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e25); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseName();
        if (s3 !== peg$FAILED) {
          s4 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 58) {
            s5 = peg$c9;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e9); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parseInteger();
            if (s6 !== peg$FAILED) {
              s4 = s6;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          peg$savedPos = s0;
          s0 = peg$f67(s1, s3, s4);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 16) === peg$c84) {
        s1 = peg$c84;
        peg$currPos += 16;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e84); }
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 61) {
          s2 = peg$c25;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e25); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseName();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f68(s1, s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseItemDefaultStmt() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 19) === peg$c85) {
      s1 = peg$c85;
      peg$currPos += 19;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e85); }
    }
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 61) {
        s2 = peg$c25;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e25); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseSignedInt();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = peg$parse_();
        s5 = peg$parseText();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f69(s1, s3, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 18) === peg$c86) {
        s1 = peg$c86;
        peg$currPos += 18;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e86); }
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 61) {
          s2 = peg$c25;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e25); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseSignedInt();
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          s4 = peg$parse_();
          s5 = peg$parseText();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f70(s1, s3, s5);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseStatAdjustmentStmt() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 12) === peg$c87) {
      s1 = peg$c87;
      peg$currPos += 12;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e87); }
    }
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (input.substr(peg$currPos, 8) === peg$c88) {
      s2 = peg$c88;
      peg$currPos += 8;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e88); }
    }
    if (s2 === peg$FAILED) {
      if (input.substr(peg$currPos, 8) === peg$c89) {
        s2 = peg$c89;
        peg$currPos += 8;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e89); }
      }
    }
    if (s2 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 45) {
        s3 = peg$c90;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e90); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parsePrimaryStat();
        if (s4 !== peg$FAILED) {
          s5 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 95) {
            s6 = peg$c91;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e91); }
          }
          if (s6 !== peg$FAILED) {
            s7 = peg$parseName();
            if (s7 !== peg$FAILED) {
              s5 = s7;
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
          if (s5 === peg$FAILED) {
            s5 = null;
          }
          if (input.charCodeAt(peg$currPos) === 61) {
            s6 = peg$c25;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e25); }
          }
          if (s6 !== peg$FAILED) {
            s7 = peg$parseInteger();
            if (s7 !== peg$FAILED) {
              s8 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 45) {
                s9 = peg$c90;
                peg$currPos++;
              } else {
                s9 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e90); }
              }
              if (s9 !== peg$FAILED) {
                s10 = peg$parseStatAdjustType();
                if (s10 !== peg$FAILED) {
                  s8 = s10;
                } else {
                  peg$currPos = s8;
                  s8 = peg$FAILED;
                }
              } else {
                peg$currPos = s8;
                s8 = peg$FAILED;
              }
              if (s8 === peg$FAILED) {
                s8 = null;
              }
              s9 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 126) {
                s10 = peg$c92;
                peg$currPos++;
              } else {
                s10 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e92); }
              }
              if (s10 !== peg$FAILED) {
                s11 = peg$parseText();
                if (s11 !== peg$FAILED) {
                  s9 = s11;
                } else {
                  peg$currPos = s9;
                  s9 = peg$FAILED;
                }
              } else {
                peg$currPos = s9;
                s9 = peg$FAILED;
              }
              if (s9 === peg$FAILED) {
                s9 = null;
              }
              peg$savedPos = s0;
              s0 = peg$f71(s2, s4, s5, s7, s8, s9);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 11) === peg$c93) {
        s1 = peg$c93;
        peg$currPos += 11;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e93); }
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 45) {
          s2 = peg$c90;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e90); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsePrimaryStat();
          if (s3 !== peg$FAILED) {
            s4 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 95) {
              s5 = peg$c91;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e91); }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parseName();
              if (s6 !== peg$FAILED) {
                s4 = s6;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
            if (s4 === peg$FAILED) {
              s4 = null;
            }
            if (input.charCodeAt(peg$currPos) === 61) {
              s5 = peg$c25;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e25); }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parseWscText();
              if (s6 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f72(s3, s4, s6);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 20) === peg$c94) {
          s1 = peg$c94;
          peg$currPos += 20;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e94); }
        }
        if (s1 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 61) {
            s2 = peg$c25;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e25); }
          }
          if (s2 !== peg$FAILED) {
            if (input.substr(peg$currPos, 13) === peg$c95) {
              s3 = peg$c95;
              peg$currPos += 13;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e95); }
            }
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f73(s1, s3);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 28) === peg$c96) {
            s1 = peg$c96;
            peg$currPos += 28;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e96); }
          }
          if (s1 === peg$FAILED) {
            if (input.substr(peg$currPos, 19) === peg$c97) {
              s1 = peg$c97;
              peg$currPos += 19;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e97); }
            }
          }
          if (s1 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 61) {
              s2 = peg$c25;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e25); }
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parseInteger();
              if (s3 !== peg$FAILED) {
                if (input.substr(peg$currPos, 5) === peg$c98) {
                  s4 = peg$c98;
                  peg$currPos += 5;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e98); }
                }
                if (s4 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f74(s1, s3);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
      }
    }

    return s0;
  }

  function peg$parseMiscSheetStmt() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 23) === peg$c99) {
      s1 = peg$c99;
      peg$currPos += 23;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e99); }
    }
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 61) {
        s2 = peg$c25;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e25); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseName();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f75(s1, s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 22) === peg$c100) {
        s1 = peg$c100;
        peg$currPos += 22;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e100); }
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 61) {
          s2 = peg$c25;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e25); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseAbility();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f76(s1, s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 8) === peg$c101) {
          s1 = peg$c101;
          peg$currPos += 8;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e101); }
        }
        if (s1 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 61) {
            s2 = peg$c25;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e25); }
          }
          if (s2 !== peg$FAILED) {
            if (input.substr(peg$currPos, 4) === peg$c102) {
              s3 = peg$c102;
              peg$currPos += 4;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e102); }
            }
            if (s3 === peg$FAILED) {
              if (input.substr(peg$currPos, 5) === peg$c103) {
                s3 = peg$c103;
                peg$currPos += 5;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e103); }
              }
              if (s3 === peg$FAILED) {
                if (input.substr(peg$currPos, 6) === peg$c104) {
                  s3 = peg$c104;
                  peg$currPos += 6;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e104); }
                }
                if (s3 === peg$FAILED) {
                  if (input.substr(peg$currPos, 5) === peg$c105) {
                    s3 = peg$c105;
                    peg$currPos += 5;
                  } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e105); }
                  }
                  if (s3 === peg$FAILED) {
                    if (input.substr(peg$currPos, 4) === peg$c106) {
                      s3 = peg$c106;
                      peg$currPos += 4;
                    } else {
                      s3 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e106); }
                    }
                    if (s3 === peg$FAILED) {
                      if (input.substr(peg$currPos, 10) === peg$c107) {
                        s3 = peg$c107;
                        peg$currPos += 10;
                      } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e107); }
                      }
                    }
                  }
                }
              }
            }
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f77(s1, s3);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 23) === peg$c108) {
            s1 = peg$c108;
            peg$currPos += 23;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e108); }
          }
          if (s1 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 61) {
              s2 = peg$c25;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e25); }
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parseName();
              if (s3 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f78(s1, s3);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 7) === peg$c109) {
              s1 = peg$c109;
              peg$currPos += 7;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e109); }
            }
            if (s1 !== peg$FAILED) {
              if (input.substr(peg$currPos, 6) === peg$c110) {
                s2 = peg$c110;
                peg$currPos += 6;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e110); }
              }
              if (s2 !== peg$FAILED) {
                s3 = peg$parseInteger();
                if (s3 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f79(s1, s3);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.substr(peg$currPos, 21) === peg$c111) {
                s1 = peg$c111;
                peg$currPos += 21;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e111); }
              }
              if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$f80(s1);
              }
              s0 = s1;
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.substr(peg$currPos, 32) === peg$c112) {
                  s1 = peg$c112;
                  peg$currPos += 32;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e112); }
                }
                if (s1 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$f81(s1);
                }
                s0 = s1;
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  if (input.substr(peg$currPos, 34) === peg$c113) {
                    s1 = peg$c113;
                    peg$currPos += 34;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e113); }
                  }
                  if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$f82(s1);
                  }
                  s0 = s1;
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsePrimaryStat() {
    var s0, s1;

    if (input.substr(peg$currPos, 5) === peg$c114) {
      s0 = peg$c114;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e114); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 4) === peg$c115) {
        s0 = peg$c115;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e115); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c116) {
          s0 = peg$c116;
          peg$currPos += 5;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e116); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c117) {
            s0 = peg$c117;
            peg$currPos += 2;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e117); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 10).toLowerCase() === peg$c118) {
              s0 = input.substr(peg$currPos, 10);
              peg$currPos += 10;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e118); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 5) === peg$c119) {
                s0 = peg$c119;
                peg$currPos += 5;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e119); }
              }
              if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 10) === peg$c120) {
                  s0 = peg$c120;
                  peg$currPos += 10;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e120); }
                }
                if (s0 === peg$FAILED) {
                  if (input.substr(peg$currPos, 12) === peg$c121) {
                    s0 = peg$c121;
                    peg$currPos += 12;
                  } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e121); }
                  }
                  if (s0 === peg$FAILED) {
                    if (input.substr(peg$currPos, 7) === peg$c122) {
                      s0 = peg$c122;
                      peg$currPos += 7;
                    } else {
                      s0 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e122); }
                    }
                    if (s0 === peg$FAILED) {
                      if (input.substr(peg$currPos, 26) === peg$c123) {
                        s0 = peg$c123;
                        peg$currPos += 26;
                      } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e123); }
                      }
                      if (s0 === peg$FAILED) {
                        if (input.substr(peg$currPos, 10) === peg$c124) {
                          s0 = peg$c124;
                          peg$currPos += 10;
                        } else {
                          s0 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e124); }
                        }
                        if (s0 === peg$FAILED) {
                          if (input.substr(peg$currPos, 7) === peg$c125) {
                            s0 = peg$c125;
                            peg$currPos += 7;
                          } else {
                            s0 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$e125); }
                          }
                          if (s0 === peg$FAILED) {
                            if (input.substr(peg$currPos, 13) === peg$c126) {
                              s0 = peg$c126;
                              peg$currPos += 13;
                            } else {
                              s0 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$e126); }
                            }
                            if (s0 === peg$FAILED) {
                              if (input.substr(peg$currPos, 23) === peg$c127) {
                                s0 = peg$c127;
                                peg$currPos += 23;
                              } else {
                                s0 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$e127); }
                              }
                              if (s0 === peg$FAILED) {
                                if (input.substr(peg$currPos, 29) === peg$c128) {
                                  s0 = peg$c128;
                                  peg$currPos += 29;
                                } else {
                                  s0 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$e128); }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 15) === peg$c129) {
        s0 = peg$c129;
        peg$currPos += 15;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e129); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 19) === peg$c130) {
          s0 = peg$c130;
          peg$currPos += 19;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e130); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 15) === peg$c131) {
            s0 = peg$c131;
            peg$currPos += 15;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e131); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 19) === peg$c132) {
              s0 = peg$c132;
              peg$currPos += 19;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e132); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 15) === peg$c133) {
                s0 = peg$c133;
                peg$currPos += 15;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e133); }
              }
              if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 19) === peg$c134) {
                  s0 = peg$c134;
                  peg$currPos += 19;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e134); }
                }
                if (s0 === peg$FAILED) {
                  if (input.substr(peg$currPos, 15) === peg$c135) {
                    s0 = peg$c135;
                    peg$currPos += 15;
                  } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e135); }
                  }
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.substr(peg$currPos, 19) === peg$c136) {
                      s1 = peg$c136;
                      peg$currPos += 19;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e136); }
                    }
                    if (s1 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$f83();
                    }
                    s0 = s1;
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseUniversalStmt() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8) === peg$c137) {
      s1 = peg$c137;
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e137); }
    }
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 61) {
        s2 = peg$c25;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e25); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseWscText();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f84(s1, s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 16) === peg$c138) {
        s1 = peg$c138;
        peg$currPos += 16;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e138); }
      }
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 61) {
          s2 = peg$c25;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e25); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseText();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f85(s1, s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 26) === peg$c139) {
          s1 = peg$c139;
          peg$currPos += 26;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e139); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f86(s1);
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 15) === peg$c140) {
            s1 = peg$c140;
            peg$currPos += 15;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e140); }
          }
          if (s1 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 61) {
              s2 = peg$c25;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e25); }
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parseName();
              if (s3 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 58) {
                  s4 = peg$c9;
                  peg$currPos++;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e9); }
                }
                if (s4 !== peg$FAILED) {
                  s5 = peg$currPos;
                  s6 = peg$parseName();
                  if (s6 !== peg$FAILED) {
                    s7 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 40) {
                      s8 = peg$c3;
                      peg$currPos++;
                    } else {
                      s8 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e3); }
                    }
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parseName();
                      if (s9 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 41) {
                          s10 = peg$c5;
                          peg$currPos++;
                        } else {
                          s10 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e5); }
                        }
                        if (s10 !== peg$FAILED) {
                          s8 = [s8, s9, s10];
                          s7 = s8;
                        } else {
                          peg$currPos = s7;
                          s7 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s7;
                        s7 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s7;
                      s7 = peg$FAILED;
                    }
                    if (s7 === peg$FAILED) {
                      s7 = null;
                    }
                    peg$savedPos = s5;
                    s5 = peg$f87(s1, s3);
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                  if (s5 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s0 = peg$f88(s1, s3, s5);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 12) === peg$c141) {
              s1 = peg$c141;
              peg$currPos += 12;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e141); }
            }
            if (s1 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 61) {
                s2 = peg$c25;
                peg$currPos++;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e25); }
              }
              if (s2 !== peg$FAILED) {
                s3 = peg$parseName();
                if (s3 !== peg$FAILED) {
                  s4 = peg$currPos;
                  if (input.substr(peg$currPos, 5) === peg$c142) {
                    s5 = peg$c142;
                    peg$currPos += 5;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e142); }
                  }
                  if (s5 !== peg$FAILED) {
                    s6 = [];
                    if (peg$r0.test(input.charAt(peg$currPos))) {
                      s7 = input.charAt(peg$currPos);
                      peg$currPos++;
                    } else {
                      s7 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e143); }
                    }
                    if (s7 !== peg$FAILED) {
                      while (s7 !== peg$FAILED) {
                        s6.push(s7);
                        if (peg$r0.test(input.charAt(peg$currPos))) {
                          s7 = input.charAt(peg$currPos);
                          peg$currPos++;
                        } else {
                          s7 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e143); }
                        }
                      }
                    } else {
                      s6 = peg$FAILED;
                    }
                    if (s6 !== peg$FAILED) {
                      peg$savedPos = s4;
                      s4 = peg$f89(s1, s3);
                    } else {
                      peg$currPos = s4;
                      s4 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                  }
                  if (s4 === peg$FAILED) {
                    s4 = null;
                  }
                  if (input.charCodeAt(peg$currPos) === 58) {
                    s5 = peg$c9;
                    peg$currPos++;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e9); }
                  }
                  if (s5 !== peg$FAILED) {
                    s6 = peg$parseArray();
                    if (s6 === peg$FAILED) {
                      s6 = peg$parseText();
                    }
                    if (s6 === peg$FAILED) {
                      s6 = null;
                    }
                    peg$savedPos = s0;
                    s0 = peg$f90(s1, s3, s4, s6);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.substr(peg$currPos, 14) === peg$c143) {
                s1 = peg$c143;
                peg$currPos += 14;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e144); }
              }
              if (s1 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 61) {
                  s2 = peg$c25;
                  peg$currPos++;
                } else {
                  s2 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e25); }
                }
                if (s2 !== peg$FAILED) {
                  s3 = peg$parseName();
                  if (s3 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s0 = peg$f91(s1, s3);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.substr(peg$currPos, 19) === peg$c144) {
                  s1 = peg$c144;
                  peg$currPos += 19;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e145); }
                }
                if (s1 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 61) {
                    s2 = peg$c25;
                    peg$currPos++;
                  } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e25); }
                  }
                  if (s2 !== peg$FAILED) {
                    s3 = peg$parseName();
                    if (s3 !== peg$FAILED) {
                      if (input.charCodeAt(peg$currPos) === 58) {
                        s4 = peg$c9;
                        peg$currPos++;
                      } else {
                        s4 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e9); }
                      }
                      if (s4 !== peg$FAILED) {
                        s5 = peg$parseInteger();
                        if (s5 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s0 = peg$f92(s1, s3, s5);
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  if (input.substr(peg$currPos, 15) === peg$c145) {
                    s1 = peg$c145;
                    peg$currPos += 15;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e146); }
                  }
                  if (s1 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 61) {
                      s2 = peg$c25;
                      peg$currPos++;
                    } else {
                      s2 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e25); }
                    }
                    if (s2 !== peg$FAILED) {
                      s3 = peg$currPos;
                      s4 = [];
                      s5 = peg$parseAbility();
                      while (s5 !== peg$FAILED) {
                        s4.push(s5);
                        s5 = peg$currPos;
                        if (input.charCodeAt(peg$currPos) === 44) {
                          s6 = peg$c26;
                          peg$currPos++;
                        } else {
                          s6 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e26); }
                        }
                        if (s6 !== peg$FAILED) {
                          s6 = peg$parseAbility();
                          if (s6 === peg$FAILED) {
                            peg$currPos = s5;
                            s5 = peg$FAILED;
                          } else {
                            s5 = s6;
                          }
                        } else {
                          s5 = s6;
                        }
                      }
                      if (s4.length < 1) {
                        peg$currPos = s3;
                        s3 = peg$FAILED;
                      } else {
                        s3 = s4;
                      }
                      if (s3 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s0 = peg$f93(s1, s3);
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseUnimplementedStmt() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    if (peg$r1.test(input.charAt(peg$currPos))) {
      s3 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e147); }
    }
    if (s3 !== peg$FAILED) {
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        if (peg$r1.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e147); }
        }
      }
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f94(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseName() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = [];
    if (peg$r2.test(input.charAt(peg$currPos))) {
      s3 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e148); }
    }
    if (s3 !== peg$FAILED) {
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        if (peg$r2.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e148); }
        }
      }
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f95();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseAbility() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c146) {
      s1 = input.substr(peg$currPos, 3);
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e150); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c147) {
        s1 = input.substr(peg$currPos, 3);
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e151); }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c148) {
          s1 = input.substr(peg$currPos, 3);
          peg$currPos += 3;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e152); }
        }
        if (s1 === peg$FAILED) {
          if (input.substr(peg$currPos, 3).toLowerCase() === peg$c149) {
            s1 = input.substr(peg$currPos, 3);
            peg$currPos += 3;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e153); }
          }
          if (s1 === peg$FAILED) {
            if (input.substr(peg$currPos, 3).toLowerCase() === peg$c150) {
              s1 = input.substr(peg$currPos, 3);
              peg$currPos += 3;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e154); }
            }
            if (s1 === peg$FAILED) {
              if (input.substr(peg$currPos, 3).toLowerCase() === peg$c151) {
                s1 = input.substr(peg$currPos, 3);
                peg$currPos += 3;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e155); }
              }
            }
          }
        }
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f96();
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e149); }
    }

    return s0;
  }

  function peg$parseSpeedType() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c152) {
      s1 = input.substr(peg$currPos, 6);
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e157); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c153) {
        s1 = input.substr(peg$currPos, 5);
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e158); }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c154) {
          s1 = input.substr(peg$currPos, 3);
          peg$currPos += 3;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e159); }
        }
        if (s1 === peg$FAILED) {
          if (input.substr(peg$currPos, 4).toLowerCase() === peg$c155) {
            s1 = input.substr(peg$currPos, 4);
            peg$currPos += 4;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e160); }
          }
          if (s1 === peg$FAILED) {
            if (input.substr(peg$currPos, 4).toLowerCase() === peg$c156) {
              s1 = input.substr(peg$currPos, 4);
              peg$currPos += 4;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e161); }
            }
          }
        }
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f97();
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e156); }
    }

    return s0;
  }

  function peg$parseStatAdjustType() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c157) {
      s1 = input.substr(peg$currPos, 6);
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e162); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c158) {
        s1 = input.substr(peg$currPos, 5);
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e163); }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 8).toLowerCase() === peg$c159) {
          s1 = input.substr(peg$currPos, 8);
          peg$currPos += 8;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e164); }
        }
        if (s1 === peg$FAILED) {
          if (input.substr(peg$currPos, 12).toLowerCase() === peg$c160) {
            s1 = input.substr(peg$currPos, 12);
            peg$currPos += 12;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e165); }
          }
        }
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f98();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 6).toLowerCase() === peg$c161) {
        s1 = input.substr(peg$currPos, 6);
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e166); }
      }
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c162) {
          s2 = input.substr(peg$currPos, 6);
          peg$currPos += 6;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e167); }
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        peg$savedPos = s0;
        s0 = peg$f99();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 9).toLowerCase() === peg$c163) {
          s1 = input.substr(peg$currPos, 9);
          peg$currPos += 9;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e168); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f100();
        }
        s0 = s1;
      }
    }

    return s0;
  }

  function peg$parseProficiency() {
    var s0;

    s0 = peg$parseQualifiedProficiency();
    if (s0 === peg$FAILED) {
      s0 = peg$parseFixedProfName();
    }

    return s0;
  }

  function peg$parseQualifiedProficiency() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseFixedProfName();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 126) {
        s2 = peg$c92;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e92); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseFixedProfName();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f101(s1, s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseFixedProfName() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseSpellTradition();
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 8).toLowerCase() === peg$c164) {
        s2 = input.substr(peg$currPos, 8);
        peg$currPos += 8;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e169); }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f102(s1);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseSpellTradition();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 12).toLowerCase() === peg$c165) {
          s2 = input.substr(peg$currPos, 12);
          peg$currPos += 12;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e170); }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f103(s1);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = [];
        if (peg$r3.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e171); }
        }
        if (s2 !== peg$FAILED) {
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            if (peg$r3.test(input.charAt(peg$currPos))) {
              s2 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e171); }
            }
          }
        } else {
          s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f104();
        }
        s0 = s1;
      }
    }

    return s0;
  }

  function peg$parseSpellTradition() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c166) {
      s1 = input.substr(peg$currPos, 6);
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e172); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 6).toLowerCase() === peg$c167) {
        s1 = input.substr(peg$currPos, 6);
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e173); }
      }
      if (s1 === peg$FAILED) {
        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c168) {
          s1 = input.substr(peg$currPos, 6);
          peg$currPos += 6;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e174); }
        }
        if (s1 === peg$FAILED) {
          if (input.substr(peg$currPos, 6).toLowerCase() === peg$c169) {
            s1 = input.substr(peg$currPos, 6);
            peg$currPos += 6;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e175); }
          }
        }
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f105();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseFromChoice() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 123) {
      s1 = peg$c21;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e21); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseVariable();
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 125) {
          s3 = peg$c22;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e22); }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f106(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = [];
      if (peg$r4.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e176); }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (peg$r4.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e176); }
          }
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f107();
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parseVariable() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    if (peg$r5.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e177); }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        if (peg$r5.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e177); }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f108();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseLevel() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c170) {
      s1 = peg$c170;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e178); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f109();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 10) === peg$c171) {
        s1 = peg$c171;
        peg$currPos += 10;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e179); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 43) {
          s3 = peg$c172;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e180); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseInteger();
          if (s4 !== peg$FAILED) {
            s2 = s4;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        peg$savedPos = s0;
        s0 = peg$f110(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseAbility();
        if (s1 !== peg$FAILED) {
          s2 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 43) {
            s3 = peg$c172;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e180); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseInteger();
            if (s4 !== peg$FAILED) {
              s2 = s4;
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
          if (s2 === peg$FAILED) {
            s2 = null;
          }
          peg$savedPos = s0;
          s0 = peg$f111(s1, s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseInteger();
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f112(s1);
          }
          s0 = s1;
        }
      }
    }

    return s0;
  }

  function peg$parseSpellLevel() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseInteger();
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 5) === peg$c173) {
        s2 = peg$c173;
        peg$currPos += 5;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e181); }
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f113(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseFeat() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseName();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseChoices();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f114(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseChoices() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 91) {
      s1 = peg$c174;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e182); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = [];
      s4 = peg$parseName();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 44) {
          s5 = peg$c26;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e26); }
        }
        if (s5 !== peg$FAILED) {
          s5 = peg$parseName();
          if (s5 === peg$FAILED) {
            peg$currPos = s4;
            s4 = peg$FAILED;
          } else {
            s4 = s5;
          }
        } else {
          s4 = s5;
        }
      }
      if (s3.length < 1) {
        peg$currPos = s2;
        s2 = peg$FAILED;
      } else {
        s2 = s3;
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 44) {
          s3 = peg$c26;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e26); }
        }
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        if (input.charCodeAt(peg$currPos) === 93) {
          s4 = peg$c175;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e183); }
        }
        if (s4 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f115(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseText() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = [];
    if (peg$r6.test(input.charAt(peg$currPos))) {
      s3 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e184); }
    }
    if (s3 !== peg$FAILED) {
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        if (peg$r6.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e184); }
        }
      }
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f116();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseWscText() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = [];
    if (peg$r7.test(input.charAt(peg$currPos))) {
      s3 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e185); }
    }
    if (s3 !== peg$FAILED) {
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        if (peg$r7.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e185); }
        }
      }
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f117();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseArray() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 91) {
      s1 = peg$c174;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e182); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = [];
      s4 = peg$parseQuoted();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 44) {
          s5 = peg$c26;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e26); }
        }
        if (s5 !== peg$FAILED) {
          s5 = peg$parseQuoted();
          if (s5 === peg$FAILED) {
            peg$currPos = s4;
            s4 = peg$FAILED;
          } else {
            s4 = s5;
          }
        } else {
          s4 = s5;
        }
      }
      if (s3.length < 1) {
        peg$currPos = s2;
        s2 = peg$FAILED;
      } else {
        s2 = s3;
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 93) {
          s3 = peg$c175;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e183); }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f118();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseQuoted() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.charCodeAt(peg$currPos) === 34) {
      s2 = peg$c176;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e186); }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      if (peg$r8.test(input.charAt(peg$currPos))) {
        s4 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e187); }
      }
      if (s4 !== peg$FAILED) {
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          if (peg$r8.test(input.charAt(peg$currPos))) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e187); }
          }
        }
      } else {
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 34) {
          s4 = peg$c176;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e186); }
        }
        if (s4 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f119();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseRank() {
    var s0, s1;

    peg$silentFails++;
    s0 = peg$currPos;
    if (peg$r9.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e189); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f120();
    }
    s0 = s1;
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e188); }
    }

    return s0;
  }

  function peg$parseSignedInt() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (peg$r10.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e190); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      if (peg$r11.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e191); }
      }
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (peg$r11.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e191); }
          }
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f121();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseInteger() {
    var s0, s1, s2, s3;

    peg$silentFails++;
    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = [];
    if (peg$r11.test(input.charAt(peg$currPos))) {
      s3 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e191); }
    }
    if (s3 !== peg$FAILED) {
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        if (peg$r11.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e191); }
        }
      }
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f122();
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e192); }
    }

    return s0;
  }

  function peg$parse_() {
    var s0, s1;

    peg$silentFails++;
    s0 = [];
    if (peg$r12.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e194); }
    }
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      if (peg$r12.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e194); }
      }
    }
    peg$silentFails--;
    s1 = peg$FAILED;
    if (peg$silentFails === 0) { peg$fail(peg$e193); }

    return s0;
  }

 
  // Testing at https://peggyjs.org/online.html

  // Not using https://www.npmjs.com/package/ts-pegjs since it produced a parser that did not
  // fully support Peggy 3.0.0 syntax.

  // npx peggy --format es src/wsc/wsc-code.pegjs -o src/wsc/wsc-code.js

  const camelize = function camelize(str) {
    return str.toLowerCase().replace(/[^a-zA-Z0-9]+(.)/g, (m, chr) => chr.toUpperCase());
  }

  const c = (f, ...rest) => [camelize(f), ...rest];
  const s = (f, ...rest) => [camelize(f), ...rest];

  peg$result = peg$startRuleFunction();

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

export {
  peg$SyntaxError as SyntaxError,

  peg$parse as parse
};
